<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>80211帧学习</title>
    <url>/2020/09/09/80211%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p><img src="https://uploader.shimo.im/f/c8C511GlBEzBRPoU.png!thumbnail" alt="图片"></p>
<ul>
<li>MAC:访问介质与传输数据的规则</li>
<li>PHY:传输细节<h2 id="80211帧类型与结构学习"><a href="#80211帧类型与结构学习" class="headerlink" title="80211帧类型与结构学习"></a>80211帧类型与结构学习</h2></li>
</ul>
<blockquote>
<p>1.数据帧:传输数据呗，最简单的，就是从哪里来，到哪里去，数据是否传输成功<br>2.控制帧:协助数据帧传输，处理冲突、传输管理<br>3.管理帧:主要是无线网络的扫描、加入、退出、接入点转移<br>抓包图：<br><a href="https://blog.csdn.net/weixin_41572450/article/details/100731335" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41572450/article/details/100731335</a></p>
</blockquote>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p><img src="https://uploader.shimo.im/f/u587o79bmQFUEOce.png!thumbnail" alt="图片"></p>
<ul>
<li>上面只是一般的格式，不是所有的数据都有除了控制帧，管理帧和数据帧的header(就会frame body前的部分)一般是24-30(就是有无address4的区别)</li>
</ul>
<h3 id="管理帧"><a href="#管理帧" class="headerlink" title="管理帧"></a>管理帧</h3><ul>
<li>特性：帧主体有固定字段（长度固定的字段）和信息元素（长度不定的数据块）<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">信息元素和固定字段https://blog.csdn.net/u014436243/article/details/90025061</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="https://uploader.shimo.im/f/taRsTIE4RFyubKth.png!thumbnail" alt="图片"></p>
<ul>
<li>主要的帧就是：<br>|子类型Subtype值|代表的类型|<br>|:—-|:—-|<br>|0000|Association Request(关联请求)|<br>|0001|Association Response (关联响应)|<br>|0010|Reassociation Request(重关联请求)|<br>|0011|Reassociation Response(重关联响应)|<br>|0100|Probe Request(探测请求)|<br>|0101|Probe Response(探测响应)|<br>|1000|Beacon(信标帧)|<br>|1001|ATIM(通知传输指示信息)|<br>|1010|Disassociation(解除关联)|<br>|1011|Authentication(解除身份验证)|<br>|1100|Deauthentication(解除身份验证)|</li>
</ul>
<ul>
<li>各个帧包含的数据：认证查看frame body就可以知道每个包携带的数据了</li>
</ul>
<p><img src="https://uploader.shimo.im/f/2AIdKcUmtZ1ctTYs.png!thumbnail" alt="图片"></p>
<p><img src="https://uploader.shimo.im/f/9dWpNdH5jw0GCVio.png!thumbnail" alt="图片"></p>
<p><img src="https://uploader.shimo.im/f/aTUzvbhNxk4VeNB7.png!thumbnail" alt="图片"></p>
<p><img src="https://uploader.shimo.im/f/7xc48isZa9rtFMCf.png!thumbnail" alt="图片"></p>
<h3 id="控制帧"><a href="#控制帧" class="headerlink" title="控制帧"></a>控制帧</h3><ul>
<li>控制帧结构较为简单，看图即可</li>
</ul>
<p><img src="https://uploader.shimo.im/f/TmgqA1LbTaeJOJZv.png!thumbnail" alt="图片"><img src="https://uploader.shimo.im/f/TAup62IMZCq1KiUR.png!thumbnail" alt="图片"></p>
<h3 id="数据帧"><a href="#数据帧" class="headerlink" title="数据帧"></a>数据帧</h3><p><img src="https://uploader.shimo.im/f/ig9SFZPzci2pidZl.png!thumbnail" alt="图片"></p>
<table>
<thead>
<tr>
<th style="text-align:left">function</th>
<th style="text-align:left">To DS</th>
<th style="text-align:left">From DS</th>
<th style="text-align:left">Address1</th>
<th style="text-align:left">Address2</th>
<th style="text-align:left">Address3</th>
<th style="text-align:left">Address4</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">IBSS</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">DA</td>
<td style="text-align:left">SA</td>
<td style="text-align:left">BSSID</td>
<td style="text-align:left">Not use</td>
</tr>
<tr>
<td style="text-align:left">TO AP</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">BSSID</td>
<td style="text-align:left">SA</td>
<td style="text-align:left">DA</td>
<td style="text-align:left">Not use</td>
</tr>
<tr>
<td style="text-align:left">FROM AP</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">DA</td>
<td style="text-align:left">BSSID</td>
<td style="text-align:left">SA</td>
<td style="text-align:left">Not use</td>
</tr>
<tr>
<td style="text-align:left">WDS</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">RA</td>
<td style="text-align:left">TA</td>
<td style="text-align:left">DA</td>
<td style="text-align:left">SA</td>
</tr>
</tbody>
</table>
<blockquote>
<p>明确一个概率：<br>da和sa是目的地址和源地址，这两个是最终的目的和数据的起源<br>ra和ta是接收地址和发送地址，这两个只是传输过程中的路径</p>
</blockquote>
<ul>
<li>IBSS：独立基本服务集？作用</li>
<li>TO AP:很明显，sender就是sa，接收地址是bssid，但是目的地址是da，目的是需要ap转发</li>
<li>FROM AP:sender就是bssid，目的地址是da，源地址就sa</li>
<li>WDS:源地址和目的地址都在后面，因为传输转手了所以有ta和ra</li>
</ul>
<p>看图</p>
<p><img src="https://uploader.shimo.im/f/PKHIRdf9o5XmH7C1.png!thumbnail" alt="图片"><img src="https://uploader.shimo.im/f/lLb5kABv3SERfaDW.png!thumbnail" alt="图片"></p>
<h2 id="如此常识"><a href="#如此常识" class="headerlink" title="如此常识"></a>如此常识</h2><h3 id="wifi连接过程"><a href="#wifi连接过程" class="headerlink" title="wifi连接过程"></a>wifi连接过程</h3><blockquote>
<p>1.发现(Scan)<br>2.认证(Authentication)<br>3.关联(Assiciation)<br>抓包看看表现，各个阶段有什么信息？</p>
</blockquote>
<h4 id="发现（SCAN）"><a href="#发现（SCAN）" class="headerlink" title="发现（SCAN）"></a>发现（SCAN）</h4><ol>
<li><p>被动连接(Passive Scanning)：监听AP发送的<strong>beacon帧———–包括mac、还有啥？</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一般第一次连接的时候一般是被动咯</span><br></pre></td></tr></table></figure>
</li>
<li><p>主动连接(Acitive Scanning)：sta依次在信道发送<strong>Probe Request帧</strong>，寻找sta所属的ssid，没有找到就一直重复—————意思就是probe一直在发</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">probe request 就是连接已经连接过的wifi时使用的，里面携带了所有曾经连接过的wifi，通过此信息路由器可以知道你连接过哪些路由(有一定的信息安全问题)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="认证阶段-Authentication"><a href="#认证阶段-Authentication" class="headerlink" title="认证阶段(Authentication)"></a>认证阶段(Authentication)</h4><blockquote>
<p>加密协议不同，连接过程有差：open、share、wpa等</p>
</blockquote>
<p>大致过程：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STA                            AP</span><br><span class="line">Authentication Request--------&gt;</span><br><span class="line">                               身份认证(验证密码啥的)</span><br><span class="line">                      &lt;--------Authentication Request</span><br></pre></td></tr></table></figure>
<h4 id="关联-Assiciation"><a href="#关联-Assiciation" class="headerlink" title="关联(Assiciation)"></a>关联(Assiciation)</h4><p>1.STA向AP发送关联请求</p>
<p>2.AP向STA返回关联响应</p>
<h4 id="漫游"><a href="#漫游" class="headerlink" title="漫游"></a>漫游</h4><p>漫游只有关联过程</p>
<p><img src="https://uploader.shimo.im/f/w4QGnDl1K6FbyNzw.png!thumbnail" alt="图片"></p>
<h2 id="空气配网原理"><a href="#空气配网原理" class="headerlink" title="空气配网原理"></a><a href="https://shimo.im/docs/HTWc9x6HPJhx6kDp" target="_blank" rel="noopener">空气配网原理</a></h2><p>详情见文档吧，不一定完全正确，当前的理解就是这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一句话概括：使用802.11管理帧或者数据帧，将数据进行编码后传输，广播是利用802.2snap length字段进行编码，组播可以利用length字段编码也可以利用变化的组播地址编码</span><br></pre></td></tr></table></figure>
<ul>
<li>长度编码：记住802.11mac的header后面的frame  body有这个snapheader就行。。。。，空气配网技术使用长度编码就是的就是其中的<strong>length字段</strong>完成</li>
</ul>
<p><img src="https://uploader.shimo.im/f/fSyvgbq42IGNmZTq.png!thumbnail" alt="图片"></p>
<ul>
<li>组播配网编码：使用ip和mac地址映射的属性完成</li>
</ul>
<ul>
<li>再研究，关键词网卡sniff、llc与snap</li>
</ul>
<h2 id="WIFI测试"><a href="#WIFI测试" class="headerlink" title="WIFI测试"></a>WIFI测试</h2><h3 id="性能相关说明"><a href="#性能相关说明" class="headerlink" title="性能相关说明"></a>性能相关说明</h3><ul>
<li>频带带宽：20Mhz干扰小，40Mhz干扰大(相关软件：NetStumbler)<a href="https://blog.csdn.net/yangzhao0001/article/details/49003289" target="_blank" rel="noopener">https://blog.csdn.net/yangzhao0001/article/details/49003289</a></li>
</ul>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200422111104.png" alt=""></p>
<h3 id="性能测试工具"><a href="#性能测试工具" class="headerlink" title="性能测试工具"></a>性能测试工具</h3><p>吞吐量测试:IXChariot(收费)、iperf(免费)(<a href="https://www.cnblogs.com/zafu/p/8696290.html" target="_blank" rel="noopener">https://www.cnblogs.com/zafu/p/8696290.html</a>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Iperf使用方法与参数说明</span><br><span class="line">==注意==：</span><br><span class="line">1.在linux上运行 iperf默认是iperf2</span><br><span class="line">2.在linux上运行 iperf3才是iperf3</span><br><span class="line">3.服务端和客户端的iperf版本要一致</span><br><span class="line">常用命令：</span><br><span class="line">服务端：iperf/iperf3 -s</span><br><span class="line">客户端：iperf/iperf3 -c ip  -i 1 -t 40</span><br><span class="line">参数说明</span><br><span class="line"></span><br><span class="line">-s 以server模式启动，eg：iperf -s</span><br><span class="line"></span><br><span class="line">-c host以client模式启动，host是server端地址，eg：iperf -c 222.35.11.23</span><br><span class="line"></span><br><span class="line">通用参数</span><br><span class="line"></span><br><span class="line">-f [kmKM] 分别表示以Kbits, Mbits, KBytes, MBytes显示报告，默认以Mbits为单位,eg：iperf -c 222.35.11.23 -f K</span><br><span class="line"></span><br><span class="line">-i sec 以秒为单位显示报告间隔，eg：iperf -c 222.35.11.23 -i 2</span><br><span class="line"></span><br><span class="line">-l 缓冲区大小，默认是8KB,eg：iperf -c 222.35.11.23 -l 16</span><br><span class="line"></span><br><span class="line">-m 显示tcp最大mtu值</span><br><span class="line"></span><br><span class="line">-o 将报告和错误信息输出到文件eg：iperf -c 222.35.11.23 -o ciperflog.txt</span><br><span class="line"></span><br><span class="line">-p 指定服务器端使用的端口或客户端所连接的端口eg：iperf -s -p 9999;iperf -c 222.35.11.23 -p 9999</span><br><span class="line"></span><br><span class="line">-u 使用udp协议</span><br><span class="line"></span><br><span class="line">-w 指定TCP窗口大小，默认是8KB</span><br><span class="line"></span><br><span class="line">-B 绑定一个主机地址或接口（当主机有多个地址或接口时使用该参数）</span><br><span class="line"></span><br><span class="line">-C 兼容旧版本（当server端和client端版本不一样时使用）</span><br><span class="line"></span><br><span class="line">-M 设定TCP数据包的最大mtu值</span><br><span class="line"></span><br><span class="line">-N 设定TCP不延时</span><br><span class="line"></span><br><span class="line">-V 传输ipv6数据包</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server专用参数</span><br><span class="line"></span><br><span class="line">-D 以服务方式运行iperf，eg：iperf -s -D</span><br><span class="line"></span><br><span class="line">-R 停止iperf服务，针对-D，eg：iperf -s -R</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">client端专用参数</span><br><span class="line"></span><br><span class="line">-d 同时进行双向传输测试</span><br><span class="line"></span><br><span class="line">-n 指定传输的字节数，eg：iperf -c 222.35.11.23 -n 100000</span><br><span class="line"></span><br><span class="line">-r 单独进行双向传输测试</span><br><span class="line"></span><br><span class="line">-t 测试时间，默认10秒,eg：iperf -c 222.35.11.23 -t 5</span><br><span class="line"></span><br><span class="line">-F 指定需要传输的文件</span><br><span class="line"></span><br><span class="line">-T 指定ttl值</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/09/03/Linux%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<h1 id="Linux命令汇总"><a href="#Linux命令汇总" class="headerlink" title="Linux命令汇总"></a>Linux命令汇总</h1><blockquote>
<p>编写原则：</p>
<p>1.大纲分类</p>
<p>2.较为复杂的可以单独写一个文档，但是汇总中要能查到</p>
<p>3.不要写具体的软件，这是通用的命令，适合所有软件</p>
<p>4.列出一些需要注意的，不要冗余</p>
</blockquote>
<a id="more"></a>
<p>[TOC]</p>
<h2 id="文件类"><a href="#文件类" class="headerlink" title="文件类"></a>文件类</h2><h3 id="硬盘管理"><a href="#硬盘管理" class="headerlink" title="硬盘管理"></a>硬盘管理</h3><h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><ul>
<li>samba</li>
<li>nfs</li>
<li>不同文件系统挂载fat、exfat、ntfs、ext4</li>
</ul>
<h4 id="查询容量与状态"><a href="#查询容量与状态" class="headerlink" title="查询容量与状态"></a>查询容量与状态</h4><ul>
<li>显示磁盘分区上可以使用的磁盘空间：df</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-hl 查看挂载点,剩余空间，以KB、MB、GB的单位来显示</span><br></pre></td></tr></table></figure>
<ul>
<li>看硬盘及分区：fdisk -l //就是看有哪些硬盘，怎么分区的</li>
<li>显示每个文件和目录的磁盘使用空间：du</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-h  以K  M  G为单位显示，提高可读性，查看某个目录的大小</span><br><span class="line">-sh 返回某个目录的大小，只有数值</span><br><span class="line">du -sm [文件夹] 返回该文件夹下文件总数</span><br></pre></td></tr></table></figure>
<h4 id="fdisk格式化新硬盘"><a href="#fdisk格式化新硬盘" class="headerlink" title="fdisk格式化新硬盘"></a>fdisk格式化新硬盘</h4><p><a href="https://www.cnblogs.com/diantong/p/8820779.html" target="_blank" rel="noopener">参考-全命令</a></p>
<ul>
<li><p>查看：fdisk -l</p>
</li>
<li><p>开始：fdisk /dev/sdb </p>
<ul>
<li>n：新建<code>p是主分区</code>&amp;<code>e是扩展分区</code></li>
<li>设置大小</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">分区号 (1-4，默认 1)：</span><br><span class="line">起始 扇区 (2048-20971519，默认为 2048)：</span><br><span class="line">将使用默认值 2048</span><br><span class="line">Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-20971519，默认为 20971519)：+3G //要多少G就设多少</span><br><span class="line">分区 1 已设置为 Linux 类型，大小设为 3 GiB</span><br></pre></td></tr></table></figure>
<ul>
<li>w：写入，不执行的话修改不会保存</li>
<li>p：打印分区表，后续可以删除</li>
<li>d：删除，选择数字</li>
</ul>
</li>
<li><p>格式化分区</p>
<ul>
<li>mkfs.ext4 /dev/sdxx //分区完成后，fdisk -l可以看到</li>
</ul>
</li>
<li><p>开机自动挂载</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo  &quot;/dev/sdb1 /data2 xfs defaults 0 0&quot;  &gt;&gt;/etc/fstab</span><br></pre></td></tr></table></figure>
<p>扩展 挂载IOS镜像等</p>
<h3 id="文件查看"><a href="#文件查看" class="headerlink" title="文件查看"></a>文件查看</h3><ul>
<li>最常用:ls</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Slh //h使文件易读 S安装从大到小排序</span><br><span class="line">可以查看文件夹和文件的权限、用户与群组</span><br></pre></td></tr></table></figure>
<ul>
<li>快速查看文件内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat -n filename显示小部分内容，-n带行号</span><br><span class="line">more filename百分比显示已看内容，回车或者空格向下看</span><br><span class="line">head -n num filename 查看从头开始的num行</span><br><span class="line">tail -n num filename 查看最后的num行</span><br></pre></td></tr></table></figure>
<ul>
<li>查看文本行数、字节、单词:wc //man一下</li>
<li>查看文件不同</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">diff --brief diff_A.txt diff_B.txt  查看两个文件是否不同</span><br><span class="line">diff -c diff_A.txt diff_B.txt 查看不同的地方</span><br></pre></td></tr></table></figure>
<h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><ul>
<li>按照指定大小和个数的数据块复制和转化文件：dd</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if 输入</span><br><span class="line">of 输出</span><br><span class="line">bs 每个块大小</span><br><span class="line">count 复制块的个数</span><br><span class="line">dd if=/dev/zero of=560_file count=1 bs=560M #/dev/zero 可以无限输入数据,可以用来测试</span><br></pre></td></tr></table></figure>
<ul>
<li>关键词查询：grep</li>
<li>拆分大文件(一般是日志)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">split -b 20M logdata mydate</span><br></pre></td></tr></table></figure>
<h3 id="设备查看"><a href="#设备查看" class="headerlink" title="设备查看"></a>设备查看</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ls /dev查看有那些设备接口</span><br><span class="line"></span><br><span class="line">/dev/hd[a-t]：IDE设备</span><br><span class="line">/dev/sd[a-z]：SCSI设备</span><br><span class="line">/dev/fd[0-7]：标准软驱</span><br><span class="line">/dev/md[0-31]：软raid设备</span><br><span class="line">/dev/loop[0-7]：本地回环设备</span><br><span class="line">/dev/ram[0-15]：内存</span><br><span class="line">/dev/null：无限数据接收设备,相当于黑洞</span><br><span class="line">/dev/zero：无限零资源</span><br><span class="line">/dev/tty[0-63]：虚拟终端</span><br><span class="line">/dev/ttyS[0-3]：串口</span><br><span class="line">/dev/lp[0-3]：并口</span><br><span class="line">/dev/console：控制台</span><br><span class="line">/dev/fb[0-31]：framebuffer</span><br><span class="line">/dev/cdrom =&gt; /dev/hdc</span><br><span class="line">/dev/modem =&gt; /dev/ttyS[0-9]</span><br><span class="line">/dev/pilot =&gt; /dev/ttyS[0-9]</span><br><span class="line">/dev/random：随机数设备</span><br><span class="line">/dev/urandom：随机数设备</span><br><span class="line"></span><br><span class="line">查看是否为SSD:cat /sys/block/sda/queue/rotational(命令中的sba是你的磁盘名称，可以通过df命令查看磁盘，然后修改成你要的。0(ssd),1(sata)）</span><br><span class="line"></span><br><span class="line">优盘没法卸载 sync fuser -km /media/usbdisk</span><br></pre></td></tr></table></figure>
<ul>
<li>查看USB设备：lsusb</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">串口的话会显示芯片型号</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200904002526.png" alt=""></p>
<h3 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h3><h3 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h3><ul>
<li>tar</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">打包：tar -cz(j)vf 输出名称 输入名称</span><br><span class="line">解包：tar -xz(j)vf 压缩包名称 //-C  输出位置与名称</span><br></pre></td></tr></table></figure>
<ul>
<li>zip、rar</li>
</ul>
<h3 id="关键目录说明"><a href="#关键目录说明" class="headerlink" title="关键目录说明"></a>关键目录说明</h3><blockquote>
<p>**为容易混淆的目录</p>
</blockquote>
<ul>
<li>系统常见目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目录	描述</span><br><span class="line">/	/ 也被称为“斜杠”或者根。</span><br><span class="line">**/bin	由系统、系统管理员以及用户共享的通用程序。</span><br><span class="line">/boot	Boot 文件, 启动加载器(grub), 内核, vmlinuz</span><br><span class="line">/dev	包含了对系统设备、带有特殊属性的文件的引用。</span><br><span class="line">/etc	重要的系统配置文件。</span><br><span class="line">/home	系统用户的主目录。</span><br><span class="line">/lib	库文件，包括系统和用户都需要的所有类型的程序的文件。</span><br><span class="line">/lost+found	文件操作失败会被保存在这里。</span><br><span class="line">/mnt	外部文件系统的标准挂载点。</span><br><span class="line">/media	外部文件系统（或者某些发行版）的挂载点。</span><br><span class="line">/net	整个远程文件系统的标准挂载点 —— nfs。</span><br><span class="line">**/opt	一般都是包含一些附加的或者第三方软件。</span><br><span class="line">/proc	一个包含了系统资源相关信息的虚拟文件系统。</span><br><span class="line">/root	root 用户的主目录。</span><br><span class="line">**/sbin	由系统和系统管理员来使用的程序。</span><br><span class="line">/tmp	供系统使用的临时空间，重启时会被清空。重启清空！重启清空！</span><br><span class="line">**/usr	供所有用户相关程序使用的程序、库、文档等等。</span><br><span class="line">**/var	存储所有由用户创建的可变文件和临时文件，比如日志文件、邮件队列、后台打印程序，Web服务器，数据库等等。</span><br></pre></td></tr></table></figure>
<ul>
<li>需要知道的目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/passwd	包含了本地 Linux 的用户。</span><br><span class="line">/etc/shadow	包含了哈希过的本地账户密码。</span><br><span class="line">/etc/group	包含了本地账户分组。</span><br><span class="line">/etc/init.d/	包含了服务网初始化脚本 – 具体都安装了些啥应该值得一瞧。</span><br><span class="line">/etc/hostname	系统的 hostname。</span><br><span class="line">/etc/network/interfaces	网络接口。</span><br><span class="line">/etc/resolv.conf	系统的 DNS 服务。</span><br><span class="line">/etc/profile	系统的环境变量。</span><br><span class="line">~/.ssh/	SSH 密钥。</span><br><span class="line">~/.bash_history	用户的 bash 历史日志。</span><br><span class="line">/var/log/	Linux 系统的日志文件一般就被存放在这里。</span><br><span class="line">/var/adm/	UNIX 系统的日志文件一般就被存在在这里。</span><br><span class="line">/var/log/apache2/access.log/var/log/httpd/access.log	Apache 访问日志文件通常的存在路径。</span><br><span class="line">/etc/fstab	挂载的文件系统。</span><br></pre></td></tr></table></figure>
<h2 id="网络类"><a href="#网络类" class="headerlink" title="网络类"></a>网络类</h2><h3 id="网络传输"><a href="#网络传输" class="headerlink" title="网络传输"></a>网络传输</h3><h3 id="网络状态"><a href="#网络状态" class="headerlink" title="网络状态"></a>网络状态</h3><h2 id="系统类"><a href="#系统类" class="headerlink" title="系统类"></a>系统类</h2><h3 id="系统环境变量和用户环境变量"><a href="#系统环境变量和用户环境变量" class="headerlink" title="系统环境变量和用户环境变量"></a>系统环境变量和用户环境变量</h3><p><a href="/etc/environment/etc/environment/etc/environment">环境变量参考</a></p>
<ul>
<li><p>显示环境变量</p>
<ul>
<li><code>export</code>命令显示当前系统定义的所有环境变量</li>
<li><code>echo $PATH</code>命令输出当前的<code>PATH</code>环境变量的值</li>
</ul>
</li>
<li><p>系统级别环境变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/profile(部分系统为：/etc/bash_profile）</span><br><span class="line">/etc/bashrc</span><br><span class="line">/etc/environment</span><br></pre></td></tr></table></figure>
</li>
<li><p>用户级别环境变量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~/.bashrc</span><br><span class="line">~/.profile（部分系统为：~/.bash_profile）</span><br><span class="line">~/.profile文件中加载了~/.bashrc文件。</span><br></pre></td></tr></table></figure>
<p><code>/.profile</code>文件<strong>只在用户登录的时候读取一次</strong>，而<code>/.bashrc</code>会在每次运行<code>Shell</code>脚本的时候读取一次。</p>
</li>
<li><p>系统与用户环境加载实质</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/environment -&gt; /etc/profile -&gt; ~/.profile</span><br></pre></td></tr></table></figure>
<ul>
<li>生效配置</li>
</ul>
<ol>
<li>使用source修改的相应文件即可</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子：source /etc/profile</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>修改方法就是把以下的语句放入相应的文件</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH=/home/uusama/mysql/bin:$PATH</span><br><span class="line"># 或者把PATH放在前面</span><br><span class="line">export PATH=$PATH:/home/uusama/mysql/bin</span><br><span class="line">$PATH的意思就是引用PATH PATH=PATH+</span><br></pre></td></tr></table></figure>
<p>注意：在shell执行export导入路径，是临时的必须添加到环境文件中</p>
<h3 id="系统信息获取"><a href="#系统信息获取" class="headerlink" title="系统信息获取"></a>系统信息获取</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、uname －a  </span><br><span class="line">Linux查看版本当前操作系统内核信息  </span><br><span class="line"></span><br><span class="line">2、cat /proc/version</span><br><span class="line">Linux查看当前操作系统版本信息      </span><br><span class="line"></span><br><span class="line">3、 cat /etc/issue  或cat /etc/redhat-release</span><br><span class="line">Linux查看版本当前操作系统发行版信息</span><br></pre></td></tr></table></figure>
<h3 id="系统状态查询-包括软件状态"><a href="#系统状态查询-包括软件状态" class="headerlink" title="系统状态查询(包括软件状态)"></a>系统状态查询(包括软件状态)</h3><h3 id="系统控制"><a href="#系统控制" class="headerlink" title="系统控制"></a>系统控制</h3><ul>
<li>history</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.列出所有使用过的命令</span><br><span class="line">2.!NumCom 惊叹号+命令数可以使得那条命令再次出现（可以删减编辑）\</span><br><span class="line">3.history -c 清除历史记录</span><br></pre></td></tr></table></figure>
<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><h2 id="权限类"><a href="#权限类" class="headerlink" title="权限类"></a>权限类</h2><h3 id="用户和群组"><a href="#用户和群组" class="headerlink" title="用户和群组"></a>用户和群组</h3><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><h3 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h3><ul>
<li>当前仅在samba中使用了SBIT位，多个用户在同一个目录下都能写文件和删除文件，操作自己的文件，不能操作其他人的文件，只有root和该目录的所有者才能操作目录下的文件。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod o+t test //其子目录会继承</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Openwrt系统配置与测试环境搭建</title>
    <url>/2020/09/03/Openwrt%E5%B8%B8%E7%94%A8%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="Openwrt软件环境配置"><a href="#Openwrt软件环境配置" class="headerlink" title="Openwrt软件环境配置"></a>Openwrt软件环境配置</h1><h2 id="更换国内opkg源"><a href="#更换国内opkg源" class="headerlink" title="更换国内opkg源"></a>更换国内opkg源</h2><blockquote>
<p>关键文件：/etc/opkg/distfeeds.conf</p>
<p>安装软件前都要opkg update(注意upgrade可能会升级系统)</p>
</blockquote>
<ul>
<li>Ac1900(arm)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src/gz openwrt_core http://mirrors.ustc.edu.cn/openwrt/releases/19.07.3/targets/mvebu/cortexa9/packages</span><br><span class="line">src/gz openwrt_kmods http://mirrors.ustc.edu.cn/openwrt/releases/19.07.3/targets/mvebu/cortexa9/kmods/4.14.180-1-a92a3f5c5bed2671533484c7ace9d5b5</span><br><span class="line">src/gz openwrt_base http://mirrors.ustc.edu.cn/openwrt/releases/19.07.3/packages/arm_cortex-a9_vfpv3-d16/base</span><br><span class="line">src/gz openwrt_luci http://mirrors.ustc.edu.cn/openwrt/releases/19.07.3/packages/arm_cortex-a9_vfpv3-d16/luci</span><br><span class="line">src/gz openwrt_packages http://mirrors.ustc.edu.cn/openwrt/releases/19.07.3/packages/arm_cortex-a9_vfpv3-d16/packages</span><br><span class="line">src/gz openwrt_routing http://mirrors.ustc.edu.cn/openwrt/releases/19.07.3/packages/arm_cortex-a9_vfpv3-d16/routing</span><br><span class="line">src/gz openwrt_telephony http://mirrors.ustc.edu.cn/openwrt/releases/19.07.3/packages/arm_cortex-a9_vfpv3-d16/telephony</span><br><span class="line"></span><br><span class="line">openwrt版本：19.07.3，更改版本后复制链接去浏览器看看有没有相关的目录，没有的话就上网查一下那个可以，各个版本基本都有在维护</span><br><span class="line">架构：arm_cortex-a9_vfpv3-d16，更改后也去看看有没有目录</span><br></pre></td></tr></table></figure>
<ul>
<li>Mimini(7620)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">src/gz openwrt_core http://mirrors.ustc.edu.cn/openwrt/releases/19.07.1/targets/ramips/mt7620/packages</span><br><span class="line">src/gz openwrt_kmods http://mirrors.ustc.edu.cn/openwrt/releases/19.07.1/targets/ramips/mt7620/kmods/4.14.167-1-18384755d38fc43c447d83d4a3e07054</span><br><span class="line">src/gz openwrt_base http://mirrors.ustc.edu.cn/openwrt/releases/19.07.1/packages/mipsel_24kc/base</span><br><span class="line">src/gz openwrt_luci http://mirrors.ustc.edu.cn/openwrt/releases/19.07.1/packages/mipsel_24kc/luci</span><br><span class="line">src/gz openwrt_packages http://mirrors.ustc.edu.cn/openwrt/releases/19.07.1/packages/mipsel_24kc/packages</span><br><span class="line">src/gz openwrt_routing http://mirrors.ustc.edu.cn/openwrt/releases/19.07.1/packages/mipsel_24kc/routing</span><br><span class="line">src/gz openwrt_telephony http://mirrors.ustc.edu.cn/openwrt/releases/19.07.1/packages/mipsel_24kc/telephony</span><br></pre></td></tr></table></figure>
<h2 id="存储相关"><a href="#存储相关" class="headerlink" title="存储相关"></a>存储相关</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opkg update //更新源 建议每次执行安装软件包命令前执行它</span><br><span class="line">opkg install kmod-nls-base kmod-scsi-core kmod-usb-core kmod-usb2 kmod-usb-storage //安装控制器、存储驱动等，这样能更好的识别和支持 USB 设备</span><br><span class="line">opkg install fdisk block-mount //安装磁盘查看工具和界面挂载工具</span><br><span class="line">opkg install kmod-fs-ext4 e2fsprogs //安装支持 ext4 格式文件系统和分区格式化工具</span><br><span class="line">opkg install luci-app-samba luci-app-ushare //安装 samba 和 ushare</span><br><span class="line">opkg install kmod-fs-ntfs //ntfs 内核驱动</span><br><span class="line">opkg install mount-utils //挂载卸载工具</span><br><span class="line">opkg install ntfs-3g //挂载 NTFS</span><br><span class="line">opkg install blkid //用于查看 USB 设备 uuid 信息</span><br><span class="line">opkg install usbutils //安装了这个后可以用 lsusb 查看 USB 设</span><br><span class="line">opkg install kmod-nls-base kmod-scsi-core kmod-usb-core kmod-usb2 kmod-usb-storage fdisk block-mount kmod-fs-ext4 e2fsprogs kmod-fs-ntfs mount-utils ntfs-3g blkid usbutils kmod-fs-cifs kmod-nls-utf8 kmod-nls-base kmod-crypto-hmac kmod-crypto-md5 kmod-crypto-misc cifsmount kmod-fs-cifs kmod-nls-utf8 kmod-nls-base kmod-crypto-hmac kmod-crypto-md5 kmod-crypto-misc cifsmount</span><br></pre></td></tr></table></figure>
<ul>
<li>挂载cifs(一般是samba)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">奇怪！！！加个vers=1.0就行，下面两个都可以</span><br><span class="line">mount.cifs //172.19.1.134/DanaTestSamba /samba -o username=danacloud,passw</span><br><span class="line">ord=11112222,vers=1.0</span><br><span class="line"></span><br><span class="line">mount -t cifs //172.19.1.134/DanaTestSamba /samba -o username=danacloud,pa</span><br><span class="line">ssword=11112222,vers=1.0</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<table>
<thead>
<tr>
<th>ipk名称</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td>kmod-fs-vfat</td>
<td>用于挂载fat格式</td>
</tr>
<tr>
<td>kmod-fs-ext3</td>
<td>用于挂载ext3格式</td>
</tr>
<tr>
<td>ntfs-3g</td>
<td>用于挂载ntfs格式</td>
</tr>
<tr>
<td>kmod-fs-cifs</td>
<td>用于挂载共享文件cifs</td>
</tr>
</tbody>
</table>
<h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><ul>
<li>NAMP</li>
<li>tcpdump</li>
</ul>
<h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><ul>
<li>串口</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opkg install kmod-usb-serial kmod-usb-serial-ftdi //可以安装相关驱动的</span><br></pre></td></tr></table></figure>
<ul>
<li>tmux</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">直接安装，日常使用</span><br></pre></td></tr></table></figure>
<ul>
<li>zsh</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opkg install wget unzip zsh ca-certificates</span><br><span class="line">sh -c &quot;$(wget -O- https://raw.githubusercontent.com/felix-fly/openwrt-ohmyzsh/master/install.sh)&quot;</span><br><span class="line"></span><br><span class="line">which zsh &amp;&amp; sed -i -- &apos;s:/bin/ash:&apos;`which zsh`&apos;:g&apos; /etc/passwd //没有设置也生效了</span><br><span class="line">sh -c &quot;$(wget -O- https://raw.githubusercontent.com/felix-fly/openwrt-ohmyzsh/master/uninstall.sh)&quot;//卸载</span><br></pre></td></tr></table></figure>
<h1 id="Openwrt网络测试环境配置"><a href="#Openwrt网络测试环境配置" class="headerlink" title="Openwrt网络测试环境配置"></a>Openwrt网络测试环境配置</h1><h2 id="有线网络配置"><a href="#有线网络配置" class="headerlink" title="有线网络配置"></a>有线网络配置</h2><blockquote>
<p>WAN和LAN的配置在/etc/config/network中 </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config interface ‘lan’ //配置LAN口 </span><br><span class="line">option type ‘bridge’ //桥接方式 </span><br><span class="line">option ifname ‘eth0.1’ // 代表vlan1,这个很重要，下面配置会用到 </span><br><span class="line">option proto ‘static’ //静态IP</span><br><span class="line"></span><br><span class="line">config device ‘lan_dev’ //配置LAN硬件信息 </span><br><span class="line">option macaddr //设置MAC地址</span><br><span class="line"></span><br><span class="line">config interface ‘wan’ //配置WAN口 </span><br><span class="line">option type ‘dhcp’ //dhcp方式(dhcp自行百度)</span><br><span class="line"></span><br><span class="line">config switch //switch中文意思就开关，所以下面就是使能vlan口 </span><br><span class="line">option enable_vlan ‘1’ // 1表示开启vlan口</span><br><span class="line"></span><br><span class="line">config switch_vlan </span><br><span class="line">option vlan ‘1’ //VLAN1, 和上面的option ifname ‘eth0.1’相匹配，所以是配置LAN口 </span><br><span class="line">option ports ‘0 1 2 3 6t’ //0~3都是LAN口，RT5350有5个端口</span><br><span class="line"></span><br><span class="line">config switch_vlan </span><br><span class="line">option vlan ‘2’ //VLAN2, 和上面的option ifname ‘eth0.2’相匹配，所以是配置WAN口 </span><br><span class="line">option ports ‘4 6t’ //4是WAN口</span><br></pre></td></tr></table></figure>
<h2 id="WIFI控制"><a href="#WIFI控制" class="headerlink" title="WIFI控制"></a>WIFI控制</h2><blockquote>
<p>1.Wifi控制主要是更改wireless文件后，重启/etc/init.d/network restart</p>
<p>2.wifi down &amp;&amp; sleep 5 &amp;&amp; wifi</p>
<p>3.ifconfig wlan down/up</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config wifi-device &apos;radio0&apos;</span><br><span class="line">	option type &apos;mac80211&apos;</span><br><span class="line">	option channel &apos;11&apos; //信道</span><br><span class="line">	option hwmode &apos;11g&apos;</span><br><span class="line">	option path &apos;10180000.wmac&apos;</span><br><span class="line">	option noscan &apos;1&apos;</span><br><span class="line">	option country &apos;CN&apos;</span><br><span class="line">	option htmode &apos;HT20&apos;</span><br><span class="line">	option txpower &apos;20</span><br><span class="line">config wifi-iface</span><br><span class="line">	option device &apos;radio0&apos;</span><br><span class="line">	option mode &apos;ap&apos;</span><br><span class="line">	option ssid &apos;Wpa2_mix&apos;//ssid</span><br><span class="line">	option network &apos;lan&apos;</span><br><span class="line">	option encryption &apos;psk2&apos;//加密方式</span><br><span class="line">	option key &apos;12345678&apos;//密码</span><br><span class="line">	option disabled &apos;1&apos;//0为开启，1为关闭</span><br></pre></td></tr></table></figure>
<h2 id="弱网环境"><a href="#弱网环境" class="headerlink" title="弱网环境"></a>弱网环境</h2><blockquote>
<p>使用Tc命令</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">openwrt安装好tc&amp;kmod-netem</span><br><span class="line">a.直接 opkg install tc 就可以了</span><br><span class="line">b.有的自带netem，不行的也可以opkg install kmod-netem 一下。</span><br><span class="line">c.无法安装的话先执行opkg update</span><br><span class="line"></span><br><span class="line">使用ping可以测试丢包、延时</span><br><span class="line">tc qdisc add dev eth0.2 root netem loss 35%</span><br><span class="line">tc qdisc add dev eth0.2 root netem delay 100ms //设置延时</span><br><span class="line">tc qdisc add dev wlan1 root netem loss 10%</span><br><span class="line">tc qdisc add dev wlan1 root netem loss 50%</span><br><span class="line">tc qdisc add dev br-wan root netem loss 10%</span><br><span class="line">tc qdisc del dev br-wan root</span><br><span class="line">tc qdisc del dev eth0.2 root</span><br><span class="line"></span><br><span class="line">tc qdisc show //显示当前已设置的情况</span><br></pre></td></tr></table></figure>
<h2 id="获取网络状态-包括wifi"><a href="#获取网络状态-包括wifi" class="headerlink" title="获取网络状态(包括wifi)"></a>获取网络状态(包括wifi)</h2><blockquote>
<p>1.<a href="https://blog.csdn.net/qq_29901193/article/details/81660331" target="_blank" rel="noopener">https://blog.csdn.net/qq_29901193/article/details/81660331</a></p>
</blockquote>
<ul>
<li>当前连接设备的ip、mac、网络速率</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.查看WLAN已连接站点，这两个是更新最快的，在进行测试的时使用实时性最高</span><br><span class="line">iw dev wlan0 station dump</span><br><span class="line">iwinfo wlan0 assoclist</span><br><span class="line"></span><br><span class="line">2.查看分配的DHCP客户端IP，这个更新速度慢</span><br><span class="line">cat /tmp/dhcp.leases</span><br><span class="line"></span><br><span class="line">3.查看设备IP、mac、在线情况(flags 0x0离线 0x2在线)</span><br><span class="line">cat /proc/net/arp </span><br><span class="line">一般使用 cat /proc/net/arp | grep ip|grep 0x0/0x2 //判断是否在线，这个更新比较快，10s左右？</span><br></pre></td></tr></table></figure>
<h2 id="获取路由器日志"><a href="#获取路由器日志" class="headerlink" title="获取路由器日志"></a>获取路由器日志</h2><ul>
<li>logread：不知晓可以获取什么时间段，多少数据。<code>logread &gt;&gt;xxx.log</code></li>
</ul>
<h2 id="更改IP池"><a href="#更改IP池" class="headerlink" title="更改IP池"></a>更改IP池</h2><p>1.理论上通过WEB界面是可以直接修改的，但是我试了好几次都不行，卡着不能生效。</p>
<p>2.vim /etc/config/network修改类似行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">config interface &apos;lan&apos;</span><br><span class="line">        option type &apos;bridge&apos;</span><br><span class="line">        option ifname &apos;eth0.1&apos;</span><br><span class="line">        option proto &apos;static&apos;</span><br><span class="line">        option ipaddr &apos;192.168.130.1&apos;</span><br><span class="line">        option netmask &apos;255.255.255.0&apos;</span><br><span class="line">        option ip6assign &apos;60&apos;</span><br><span class="line">        </span><br><span class="line">修改完成后，/etc/init.d/network restart</span><br></pre></td></tr></table></figure>
<h2 id="更改系统时间"><a href="#更改系统时间" class="headerlink" title="更改系统时间"></a>更改系统时间</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">抓取日志等有时间输出的地方会使用系统的时间，因此需要调整时间</span><br><span class="line">关键文件:/etc/config/system</span><br><span class="line">配置了得重启</span><br><span class="line">config system</span><br><span class="line">        option hostname &apos;Star-wrt&apos;</span><br><span class="line">        option zonename &apos;Asia/Shanghai&apos;//改为上海</span><br><span class="line">        option timezone &apos;CST-8&apos;//东八区</span><br><span class="line">        option ttylogin &apos;0&apos;</span><br><span class="line">        option log_size &apos;64&apos;</span><br><span class="line">        option urandom_seed &apos;0&apos;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Openwrt</category>
      </categories>
  </entry>
  <entry>
    <title>Charlse教程</title>
    <url>/2020/08/28/Charlse%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="Charles教程"><a href="#Charles教程" class="headerlink" title="Charles教程"></a><a href="https://blog.csdn.net/forebe/article/details/98945139" target="_blank" rel="noopener">Charles教程</a></h1><blockquote>
<p>理解：服务器和客户端的一个过滤器，请求和响应均可控制</p>
<p>功能：</p>
<p>1.截取https通讯信息</p>
<p>2.模拟慢速网络(手机才能用，设备用不了啊)</p>
<p>3.修改网络请求以及服务器返回的内容</p>
<p>4.简答的服务器压力测试</p>
</blockquote>
<a id="more"></a>
<h2 id="截取请求与响应"><a href="#截取请求与响应" class="headerlink" title="截取请求与响应"></a>截取请求与响应</h2><ul>
<li><p>筛选</p>
<ul>
<li>Sequence：filter栏目==临时用==</li>
<li>proxy：recording settings==常用==</li>
</ul>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200706193700.png" alt=""></p>
</li>
</ul>
<h2 id="模拟慢速网络"><a href="#模拟慢速网络" class="headerlink" title="模拟慢速网络"></a>模拟慢速网络</h2><ul>
<li><p>proxy：throttle setting</p>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200706194032.png" alt=""></p>
</li>
</ul>
<h2 id="修改网络请求"><a href="#修改网络请求" class="headerlink" title="修改网络请求"></a>修改网络请求</h2><ul>
<li>找到需要修改的请求url，找到edit</li>
</ul>
<h2 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h2><ul>
<li>Repeat Advanced</li>
</ul>
<h2 id="修改服务器返回的内容"><a href="#修改服务器返回的内容" class="headerlink" title="修改服务器返回的内容"></a>修改服务器返回的内容</h2><blockquote>
<p>Map 功能、 Rewrite 功能以及 Breakpoints 功能均可以实现</p>
</blockquote>
<ul>
<li>map：重定向请求<ul>
<li>Map Remote ：网络重定，填写源地址和目的地址</li>
<li>Map Local ：重定向本地目标文件，一般用来复杂的请求测试，先使用save response功能，然后修改保存到本地的文件，即可成为映射文件</li>
</ul>
</li>
<li>rewrite：替换请求值(批量的)</li>
<li>breakpoints：临时修改(待实现)</li>
</ul>
]]></content>
      <categories>
        <category>通用开发软件</category>
      </categories>
  </entry>
  <entry>
    <title>Grep</title>
    <url>/2020/06/22/grep/</url>
    <content><![CDATA[<blockquote>
<p>Grep的本质就是正则表达式，grep只是提供使用正则表达式的一个命令！</p>
</blockquote>
<h1 id="使用格式"><a href="#使用格式" class="headerlink" title="使用格式"></a>使用格式</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">grep 【options】【pattern】【file】 grep [参数] [匹配模式] [查找的文件]</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="常用选项"><a href="#常用选项" class="headerlink" title="常用选项"></a>常用选项</h1><table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-c</td>
<td>计算找到‘搜索字符串’的行数</td>
</tr>
<tr>
<td>-o</td>
<td>指数出匹配的内容</td>
</tr>
<tr>
<td>-i</td>
<td>不区分大小写</td>
</tr>
<tr>
<td>-n</td>
<td>显示匹配内容的行号</td>
</tr>
<tr>
<td>-r</td>
<td>当指定要查找的是目录而非文件时，必须使用这项参数，否则grep命令将回报信息并停止动作</td>
</tr>
<tr>
<td>-v</td>
<td>反向选择，即没有‘搜索字符串’内容的行</td>
</tr>
<tr>
<td>-l</td>
<td>列出文件内容符合指定的范本样式的文件名称</td>
</tr>
<tr>
<td>-E</td>
<td>扩展 grep，即 egrep，可以使用扩展正则表达式</td>
</tr>
<tr>
<td>–color=auto</td>
<td>搜索关键词显示颜色</td>
</tr>
<tr>
<td>-V</td>
<td>显示软件版本信息</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>字符集</th>
<th>说明</th>
<th>案例</th>
</tr>
</thead>
<tbody>
<tr>
<td>\^</td>
<td>锚定行的开始</td>
<td>如：’^grep’ 匹配所有以 grep 开头的行</td>
</tr>
<tr>
<td>$</td>
<td>锚定行的结束</td>
<td>如：’grep$’ 匹配所有以 grep 结尾的行</td>
</tr>
<tr>
<td>.</td>
<td>匹配一个非换行符的字符</td>
<td>如：’gr.p’ 匹配 gr 后接一个任意字符，然后是 p</td>
</tr>
<tr>
<td>*</td>
<td>匹配零个或多个先前字符</td>
<td>如：’ <em>grep’ 匹配所有一个或多个空格后紧跟 grep 的行。 .</em> 一起用代表任意字符</td>
</tr>
<tr>
<td>[ ]</td>
<td>匹配一个指定范围内的字符</td>
<td>如：’[Gg]rep’ 匹配 Grep 和 grep</td>
</tr>
<tr>
<td>[^ ]</td>
<td>匹配一个不在指定范围内的字符</td>
<td>如：’[^A-FH-Z]rep’ 匹配不包含 A-F 和 H-Z 的一个字母开头，紧跟 rep 的行</td>
</tr>
<tr>
<td>(..)</td>
<td>标记匹配字符</td>
<td>如：’(love)’，love 被标记为1</td>
</tr>
<tr>
<td>\&lt;</td>
<td>锚定单词的开始</td>
<td>如：’\&lt;grep’ 匹配包含以grep开头的单词的行</td>
</tr>
<tr>
<td>></td>
<td>锚定单词的结束</td>
<td>如：’grep>‘ 匹配包含以grep结尾的单词的行</td>
</tr>
<tr>
<td>x{m}</td>
<td>连续重复字符 x，m 次</td>
<td>如：’o{5}’ 匹配包含连续5个o的行</td>
</tr>
<tr>
<td>x{m,}</td>
<td>连续重复字符 x，至少 m 次</td>
<td>如：’o{5,}’ 匹配至少连续有5个 o 的行</td>
</tr>
<tr>
<td>x{m,n}</td>
<td>连续重复字符 x，至少 m 次，不多于 n 次</td>
<td>如：’o{5,10}’ 匹配连续 5-10 个 o 的行</td>
</tr>
<tr>
<td>\w</td>
<td>匹配一个文字和数字字符也就是 [A-Za-z0-9]</td>
<td>如：’G\w*p’ 匹配以 G 后跟零个或多个文字或数字字符，然后是p</td>
</tr>
<tr>
<td>\W</td>
<td>w 的反置形式，匹配一个非单词字符</td>
<td>如：点号句号等。\W* 则可匹配多个</td>
</tr>
<tr>
<td>\b</td>
<td>单词锁定符</td>
<td>如: ‘\bgrep\b’ 只匹配 grep，即只能是 grep 这个单词，两边均为空格</td>
</tr>
</tbody>
</table>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Samba管理</title>
    <url>/2020/06/12/samba%E5%AE%89%E8%A3%85%E4%B8%8E%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="samba管理"><a href="#samba管理" class="headerlink" title="samba管理"></a><a href="https://www.linuxidc.com/Linux/2019-04/158319.htm" target="_blank" rel="noopener">samba管理</a></h1><h2 id="安装与基本配置-centos"><a href="#安装与基本配置-centos" class="headerlink" title="安装与基本配置(centos)"></a>安装与基本配置(centos)</h2><ul>
<li>安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install samba samba-client</span><br></pre></td></tr></table></figure>
<ul>
<li>关闭防火墙：</li>
</ul>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@samba-server ~]# setenforce 0</span><br><span class="line">[root@samba-server ~]# sed -i &apos;s/SELINUX=enforcing/SELINUX=disabled/&apos; /etc/selinux/config</span><br><span class="line">[root@samba-server ~]# systemctl stop firewalld</span><br><span class="line">[root@samba-server ~]# systemctl disable firewalld</span><br></pre></td></tr></table></figure>
<ul>
<li>配置(<a href="http://blog.sina.com.cn/s/blog_ec9b75e20101jplo.html" target="_blank" rel="noopener">关于create mask</a>)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[DanaTestSamba]</span><br><span class="line">        comment = this is the info</span><br><span class="line">        path= /MyDisk1T/samba_work</span><br><span class="line">        writable = yes</span><br><span class="line">        public = yes</span><br><span class="line">        create mask = 0774 //文件创建后的默认权限</span><br><span class="line">        directory mask = 0775 //文件夹创建后的默认的权限，访问文件夹需要x权限</span><br></pre></td></tr></table></figure>
<ul>
<li>添加账号</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意:只能添加linux已有用户</span><br><span class="line">useradd -s /sbin/nologin zhangsan //设置不可登陆系统的账号</span><br><span class="line"></span><br><span class="line">pdbedit 命令用于管理Samba服务的帐户信息数据库，格式为：&quot;pdbedit [选项] 帐户&quot;</span><br><span class="line">第一次把用户信息写入到数据库时需要使用-a参数，以后修改用户密码、删除用户等等操作就不再需要了。</span><br><span class="line"> </span><br><span class="line">pdbedit -L ：查看samba用户 常用</span><br><span class="line">pdbedit -a -u user：添加samba用户</span><br><span class="line">pdbedit -r -u user：修改samba用户信息</span><br><span class="line">pdbedit -x -u user：删除samba用户</span><br><span class="line"> </span><br><span class="line">samba服务数据库的密码也可以用 smbpasswd 命令，Samba用户的密码与系统用户的密码没有任何关系。</span><br><span class="line">smbpasswd -a user：添加一个samba用户，更改已有用户密码，也是使用这个命令</span><br><span class="line">smbpasswd -d user：禁用一个samba用户</span><br><span class="line">smbpasswd -e user：恢复一个samba用户</span><br><span class="line">smbpasswd -x user：删除一个samba用户</span><br></pre></td></tr></table></figure>
<ul>
<li>启动、开启自启</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@samba-server ~]# systemctl start smb</span><br><span class="line">[root@samba-server ~]# systemctl enable smb</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/smb.service to /usr/lib/systemd/system/smb.service.</span><br><span class="line">[root@samba-server ~]# systemctl restart smb</span><br><span class="line">[root@samba-server ~]# systemctl status smb</span><br></pre></td></tr></table></figure>
<h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><ul>
<li>用户权限分配</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">权限分配实现：</span><br><span class="line">1.每个文件夹可以属于一个组、一个用户。通过控制文件夹的所属组</span><br><span class="line">所属人来控制权限</span><br><span class="line">a.设立一个用户组，拥有所有权限，dana属于此用户组</span><br><span class="line">b.大部分文件夹权限为775，所有者和管理组均有全部权限</span><br><span class="line">c.通过sbit粘滞位，可以控制即便有w权限，也只有文件拥有者和root用户以及整个文件架的拥有者能删除-----这里为了方便扩展，使用了sbit粘滞位</span><br></pre></td></tr></table></figure>
<ul>
<li>设置sbit权限(还有其他特殊权限配置的方法，暂未收录)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod o+t /filepath //设置完成后见图，增加了t权限</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200512105919.png" style="zoom: 67%;"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dana(danatest):全部权限</span><br><span class="line"></span><br><span class="line">danacloud(11112222)：对于其他文件夹可读写不能删除，【大拿平台组专用】文件夹拥有全部权限</span><br><span class="line"></span><br><span class="line">danachanpin(11112222)：对于其他文件夹可读写不能删除，【大拿产品组专用】文件夹拥有全部权限</span><br><span class="line"></span><br><span class="line">danafw(11112222)：对于其他文件夹可读写不能删除，【大拿设备组专用】文件夹拥有全部权限</span><br><span class="line"></span><br><span class="line">danapp(11112222)：对于其他文件夹可读写不能删除，【大拿APP组专用】文件夹拥有全部权限</span><br><span class="line"></span><br><span class="line">danapm(11112222)：对于其他文件夹可读写不能删除，【大拿项目组专用】文件夹拥有全部权限</span><br><span class="line"></span><br><span class="line">haique(haique666)：对于其他文件夹可读写不能删除，【海雀专用】文件夹拥有全部权限</span><br></pre></td></tr></table></figure>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="用户无法操作文件"><a href="#用户无法操作文件" class="headerlink" title="用户无法操作文件"></a>用户无法操作文件</h3><blockquote>
<p>1.确认用户权限</p>
<p>2.确认用户所属组</p>
<p>3.确认文件拥有者</p>
<p>针对以上三点对权限进行调整即可</p>
</blockquote>
<ul>
<li><p>更改所属用户(samba的账号)：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chown +R 账号 file/dir</span><br><span class="line">相关命令：</span><br><span class="line">useradd testuser  创建用户testuser</span><br><span class="line">passwd testuser   给已创建的用户testuser设置密码</span><br><span class="line">userdel testuser  删除用户testuser(先要退出这个用户，输入exit退出)</span><br><span class="line">usermod 注：修改用户命令，可以通过usermod 来修改登录名、用户的家目录等等；</span><br></pre></td></tr></table></figure>
</li>
<li><p>更改用户权限：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.用u，g,o分别代表三组，分别是user，group，others，另外，a（all）代表全部.</span><br><span class="line">2.rwx，可以转换为数字设置，r=4，w=2，x=1</span><br><span class="line">chmod   u/g/o/a   +(加入)/-(除去)/=(设定)  r/w/x  文件或者目录</span><br><span class="line">例子：chmod 777 等于chmod a+rwx，一般推荐使用数字 可以增加-R参数为递归</span><br></pre></td></tr></table></figure>
<ul>
<li>更改用户组：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chgrp -R  组群   文件名/目录 </span><br><span class="line">相关命令：</span><br><span class="line">groupadd groupa</span><br><span class="line">useradd   -g groupa zgz 添加用户到指定组(注意g和G的区别，一个是更换组，一个是添加组)</span><br><span class="line">groupmod 注：修改用户组信息</span><br><span class="line">usermod -g groupname usename(注意区别于gpasswd -a usename groupname，此为追加用户组，usermod为更改主用户组，usermod -a -G可以达到追加用户组功能)追加后用户属于多个组</span><br></pre></td></tr></table></figure>
<h3 id="Win10访问Samba一片空白"><a href="#Win10访问Samba一片空白" class="headerlink" title="Win10访问Samba一片空白"></a>Win10访问Samba一片空白</h3><ul>
<li>Win+i：启用或关闭windows功能</li>
</ul>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200508103655.png" alt=""></p>
<ul>
<li>win+r：gpedit.msc，启用</li>
</ul>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200508104359.png" alt=""></p>
<h3 id="Samba多用户，有的用户无法访问文件夹"><a href="#Samba多用户，有的用户无法访问文件夹" class="headerlink" title="Samba多用户，有的用户无法访问文件夹"></a>Samba多用户，有的用户无法访问文件夹</h3><ul>
<li>==需要将分享的那个文件夹，提供’rx’权限==，这里已经做了优化<code>directory mask = 0775</code></li>
</ul>
<h3 id="查看当前系统所有用户和用户组"><a href="#查看当前系统所有用户和用户组" class="headerlink" title="查看当前系统所有用户和用户组"></a>查看当前系统所有用户和用户组</h3><ul>
<li>查看所有用户：这是取巧，不一定准确，因为正常用户创建后又一个/home目录<code>cat /etc/passwd | grep &quot;/home&quot;</code></li>
<li>查看所有用户组：cat /etc/group，通过这个可以说明每个用户创建后默认属于自己这个组</li>
<li>查看用户所属组：groups username</li>
</ul>
<h3 id="Linux、win、mac如何访问"><a href="#Linux、win、mac如何访问" class="headerlink" title="Linux、win、mac如何访问"></a>Linux、win、mac如何访问</h3><ul>
<li>win</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：win+r \\服务器IP 如何登陆账号，选择相应的文件夹</span><br><span class="line">方法二：win+e \\172.19.1.134\DanaTestSamba，登陆账号</span><br><span class="line">注意：</span><br><span class="line">为方便后续访问，可以进行【映射网络驱动器】</span><br><span class="line">清除连接:net use * /del</span><br></pre></td></tr></table></figure>
<ul>
<li>mac</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.打开finder</span><br><span class="line">2.command+k，输入\\172.19.1.134</span><br></pre></td></tr></table></figure>
<ul>
<li>linux</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mount -t cifs //172.19.1.134/DanaTestSamba /mnt -o username=danacloud,password=11112222</span><br><span class="line">开机自动挂载：</span><br><span class="line">//172.19.1.134/DanaTestSamba /mnt cifs defaults,username=tonyzhang%111 0 0</span><br></pre></td></tr></table></figure>
<ul>
<li>Android</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下载【Es文件浏览器】----【我的网络】----【右上角[新建][局域网]】</span><br><span class="line">服务器：172.19.1.134</span><br><span class="line">用户名：xxx</span><br><span class="line">密码：xxx</span><br><span class="line">重命名(可选)：xxx</span><br></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.samba配置最麻烦的地方就是权限配置，归根结底，就是操作owner、group、other三者的权限，这里的亮点是：</p>
<ul>
<li>设置了==sbit滞粘位==使得文件==拥有可读写，但是不会被删除的属性，只有拥有者和root可以删除==，关于sbit权限，还有一条规则是：==对于目录的所有者，可以不受sbit权限的限制，他可以删除该目录中所有用户的文件。==</li>
</ul>
<table>
<thead>
<tr>
<th>所有者</th>
<th>用户组(其实就是管理员)</th>
<th>其他</th>
</tr>
</thead>
<tbody>
<tr>
<td>rwx</td>
<td>rwx</td>
<td>rx</td>
</tr>
</tbody>
</table>
<p>2.使用到的命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod</span><br><span class="line">chown： chown -R usr:group /filepath 同时更换用户和用户组  </span><br><span class="line">chgrp</span><br><span class="line">usermod ---可以深入研究一下，还可以更改用户较多的属性</span><br><span class="line">groups:查看用户所属组</span><br><span class="line">gpasswd(注意区别于passwd)：对用户组成员增、删、gpasswd -a user_name group_name最追加用户组</span><br></pre></td></tr></table></figure>
<p>3.涉及到的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/etc/group //可以编辑此文件，调整用户组</span><br><span class="line">/etc/passwd //查看当前所有用户组</span><br></pre></td></tr></table></figure>
<p>4.继续学习参考链接</p>
<p><a href="https://blog.csdn.net/freeking101/article/details/78201539" target="_blank" rel="noopener">用户和用户组</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a），查看当前登录用户</span><br><span class="line">        [root@krlcgcms01 ~]# w</span><br><span class="line">        [root@krlcgcms01 ~]# who</span><br><span class="line">b），查看自己的用户名</span><br><span class="line">        [root@krlcgcms01 ~]# whoami</span><br><span class="line">c），查看单个用户信息</span><br><span class="line">        [root@krlcgcms01 ~]# finger apacheuser //需要安装</span><br><span class="line">        [root@krlcgcms01 ~]# id apacheuser</span><br><span class="line">d），查看用户登录记录</span><br><span class="line">        [root@krlcgcms01 ~]# last 查看登录成功的用户记录</span><br><span class="line">        [root@krlcgcms01 ~]# lastb 查看登录不成功的用户记录</span><br><span class="line">e），查看所有用户</span><br><span class="line">        [root@krlcgcms01 ~]# cut -d : -f 1 /etc/passwd</span><br><span class="line">        [root@krlcgcms01 ~]# cat /etc/passwd |awk -F \: &apos;&#123;print $1&#125;&apos;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux后台运行-nohup等</title>
    <url>/2020/04/24/Linux%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C-nohup/</url>
    <content><![CDATA[<h1 id="Linux后台运行-nohup等"><a href="#Linux后台运行-nohup等" class="headerlink" title="Linux后台运行-nohup等"></a>Linux后台运行-nohup等</h1><p>参考：<a href="https://www.cnblogs.com/zsql/p/10827587.html" target="_blank" rel="noopener">https://www.cnblogs.com/zsql/p/10827587.html</a></p>
<blockquote>
<p>nohup 将程序以忽略挂起信号的方式运行起来</p>
<p>特点：</p>
<p>1.运行的输出信息不在终端显示，无论是否将 nohup 命令的输出重定向到终端，输出都将附加到当前目录的 nohup.out 文件</p>
<p>操作系统中有三个常用的流：<br>　　0：标准输入流 stdin<br>　　1：标准输出流 stdout<br>　　2：标准错误流 stderr</p>
<p>　　一般当我们用 &gt; console.txt，实际是 1&gt;console.txt的省略用法；&lt; console.txt ，实际是 0 &lt; console.txt的省略用法。</p>
</blockquote>
<a id="more"></a>
<ul>
<li>例子：<code>nohup command &amp;</code>结尾的<code>&amp;</code>代表即使终端关闭也运行</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup /usr/local/bin/frpc -c /etc/frp/frpc.ini</span><br><span class="line">&gt;/dev/null 2&gt;&amp;1 &amp; </span><br><span class="line">1.2&gt;&amp;1意思是把标准错误（2）重定向到标准输出中（1），而标准输出又导入文件output里面，所以结果是标准错误和标准输出都导入文件output里面了。 至于为什么需要将标准错误重定向到标准输出的原因，那就归结为标准错误没有缓冲区，而stdout有。这就会导致 &gt;output 2&gt;output 文件output被两次打开，而stdout和stderr将会竞争覆盖</span><br><span class="line"> </span><br><span class="line">2./dev/null文件的作用，这是一个无底洞，任何东西都可以定向到这里，但是却无法打开。 所以一般很大的stdou和stderr当你不关心的时候可以利用stdout和stderr定向到这里</span><br></pre></td></tr></table></figure>
<ul>
<li>相关命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ctrl + z #可以将一个正在前台执行的命令放到后台，并且处于暂停状态。注意ctrl+c和ctrl+d都是结束程序</span><br><span class="line"></span><br><span class="line">fg #将后台任务切换到前台执行，通过jobs -l获取当前后台运行的情况，使用fg %jobnumer切换到指定程序</span><br><span class="line"></span><br><span class="line">bg #将一个在后台暂停的命令，变成在后台继续执行。通过jobs -l获取当前后台运行的情况，可以用bg %jobnumber将选中的命令调出</span><br><span class="line"></span><br><span class="line">jobs #查看后台运行的状态，jobs -l选项可显示所有任务的PID（jobs命令只看当前终端生效的，关闭终端后，在另一个终端jobs已经无法看到后台跑得程序了，此时利用ps（进程查看命令））</span><br><span class="line"></span><br><span class="line">ps -ef | grep command 或者 ps aux | grep command #查看进程</span><br><span class="line"></span><br><span class="line">kill -9 进程id #杀掉对应的进程，</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux运维</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/04/06/Linux%E5%B8%B8%E7%94%A8%E7%BD%91%E7%BB%9C%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="系统网络配置"><a href="#系统网络配置" class="headerlink" title="系统网络配置"></a>系统网络配置</h1><blockquote>
<p>不写哪些有的没的，只写常用的就可以了，后面要用可以持续更新</p>
<p>其实这些命令在linux有良好的帮助文档，学会查看文档而不是做这么多笔记啊！</p>
</blockquote>
<h2 id="网卡配置ifconfig"><a href="#网卡配置ifconfig" class="headerlink" title="网卡配置ifconfig"></a>网卡配置ifconfig</h2><blockquote>
<p>功能：查看网络配置</p>
<p>注意：重启后恢复默认</p>
</blockquote>
<ul>
<li>常用命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="路由配置route"><a href="#路由配置route" class="headerlink" title="路由配置route"></a>路由配置route</h2><blockquote>
<p>功能：</p>
<p>注意：重启后恢复默认</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看当前路由表:route 增加-n参数直接IP显示，不加n可看到路由的名称</span><br><span class="line">默认网关:route add/del default gw ip</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="查询网络状态netstat"><a href="#查询网络状态netstat" class="headerlink" title="查询网络状态netstat"></a>查询网络状态netstat</h2><blockquote>
<p>功能：查看tcp和udp连接？</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-t：列出TCP协议端口</span><br><span class="line">-u：列出UDP协议端口</span><br><span class="line">-n：不使用域名与服务名，而使用IP地址和端口号</span><br><span class="line">-l：仅列出在监听状态网络服务</span><br><span class="line">-a：列出所有网络连接</span><br><span class="line">-r ：列出路由列表，功能和route命令一致</span><br></pre></td></tr></table></figure>
<h1 id="网络测试命令"><a href="#网络测试命令" class="headerlink" title="网络测试命令"></a>网络测试命令</h1><h2 id="路由跟踪traceroute"><a href="#路由跟踪traceroute" class="headerlink" title="路由跟踪traceroute"></a><a href="https://blog.csdn.net/llq_200/article/details/81034345" target="_blank" rel="noopener">路由跟踪traceroute</a></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">traceroute</span><br><span class="line">-d 使用Socket层级的排错功能。</span><br><span class="line">-f 设置第一个检测数据包的存活数值TTL的大小。</span><br><span class="line">-F 设置勿离断位。</span><br><span class="line">-g 设置来源路由网关，最多可设置8个。</span><br><span class="line">-i 使用指定的网络界面送出数据包。</span><br><span class="line">-I 使用ICMP回应取代UDP资料信息。</span><br><span class="line">-m 设置检测数据包的最大存活数值TTL的大小。</span><br><span class="line">-n 直接使用IP地址而非主机名称。</span><br><span class="line">-p 设置UDP传输协议的通信端口。</span><br><span class="line">-r 忽略普通的Routing Table，直接将数据包送到远端主机上。</span><br><span class="line">-s 设置本地主机送出数据包的IP地址。</span><br><span class="line">-t 设置检测数据包的TOS数值。</span><br><span class="line">-v 详细显示指令的执行过程。</span><br><span class="line">-w 设置等待远端主机回报的时间。</span><br><span class="line">-x 开启或关闭数据包的正确性检验。</span><br><span class="line">例子：设置跳速</span><br><span class="line">traceroute -m 10 www.baidcom</span><br></pre></td></tr></table></figure>
<!-- more -->
<h2 id="域名查询dig"><a href="#域名查询dig" class="headerlink" title="域名查询dig"></a>域名查询dig</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@&lt;服务器地址&gt;：指定进行域名解析的域名服务器；</span><br><span class="line">-b&lt;ip地址&gt;：当主机具有多个IP地址，指定使用本机的哪个IP地址向域名服务器发送域名查询请求；</span><br><span class="line">-f&lt;文件名称&gt;：指定dig以批处理的方式运行，指定的文件中保存着需要批处理查询的DNS任务信息；</span><br><span class="line">-P：指定域名服务器所使用端口号；</span><br><span class="line">-t&lt;类型&gt;：指定要查询的DNS数据类型；</span><br><span class="line">-x&lt;IP地址&gt;：执行逆向域名查询；</span><br><span class="line">-4：使用IPv4；</span><br><span class="line">-6：使用IPv6；</span><br><span class="line">-h：显示指令帮助信息。</span><br><span class="line"></span><br><span class="line">常用:</span><br><span class="line">dig www.baidu.com @8.8.8.8 -p53</span><br></pre></td></tr></table></figure>
<h2 id="抓包tcpdump"><a href="#抓包tcpdump" class="headerlink" title="抓包tcpdump"></a>抓包tcpdump</h2><blockquote>
<p>openwrt支持</p>
</blockquote>
<h2 id="IP与域名转换-nslookup"><a href="#IP与域名转换-nslookup" class="headerlink" title="IP与域名转换:nslookup"></a>IP与域名转换:nslookup</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用:</span><br><span class="line">1.nslookup ip 得到域名</span><br><span class="line">2.nslookup 域名 得到ip</span><br></pre></td></tr></table></figure>
<h2 id="Ping"><a href="#Ping" class="headerlink" title="Ping"></a>Ping</h2><ul>
<li>常用命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.限制ping的次数和时间:ping -c 600 -i  1 192.168.1.1 //600次每次间隔1s</span><br><span class="line"></span><br><span class="line">注意windows的ping与linux不同，</span><br><span class="line">windows常用：</span><br><span class="line">-t //开始后不停</span><br><span class="line">-c //指定次数，似乎不能指定间隔时间</span><br><span class="line">ping -n 1 -r 9 ip //跟踪路由 最多9个</span><br></pre></td></tr></table></figure>
<h2 id="监控网速"><a href="#监控网速" class="headerlink" title="监控网速"></a>监控网速</h2><h1 id="重要文件"><a href="#重要文件" class="headerlink" title="重要文件"></a>重要文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">• /etc/hosts：域名到 IP 地址的映射。</span><br><span class="line">• /etc/networks：网络名称到 IP 地址的映射。</span><br><span class="line">• /etc/protocols：协议名称到协议编号的映射。</span><br><span class="line">• /etc/services：TCP/UDP 服务名称到端口号的映射。</span><br><span class="line"></span><br><span class="line">修改网卡默认配置文件？</span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https://www.linuxprobe.com/linux-network-command.html</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Tmux使用</title>
    <url>/2020/03/20/Tmux%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="理清概念"><a href="#理清概念" class="headerlink" title="理清概念"></a>理清概念</h1><ul>
<li>会话：为Tmux中的原子(最小单位)，在一个终端执行tmux命令后就进入回话</li>
<li>窗口：会话中的原子，可以有多个窗口(可以通过编号切换切换)</li>
<li>窗格：窗口中的原子，一个窗口中可以多个窗格(有编号，但是不支持通过编号切换？)</li>
</ul>
<a id="more"></a>
<h1 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h1><blockquote>
<p>创建会话后就进入了tmux的空间</p>
<p>会话主要操作：切换、拉起、命名</p>
</blockquote>
<ul>
<li>在原始终端中执行<ul>
<li>tmux //建立会话，没有名称</li>
<li>tmux new -s name //有名称的会话</li>
<li>tmux attach -t name|num //切换到某个会话(通过名称和编号切换)</li>
<li>tmux ls //列出所有会话，<strong>可以在tmux空间中执行</strong></li>
<li>tmux kill-session -t name|num  //删除，<strong>可以在tmux空间中执行</strong></li>
<li>tmux rename-session  -t name|num  //重命名(c+b $可以重命名当前会话)，<strong>可以在tmux空间中执行</strong></li>
</ul>
</li>
<li>Tmux空间<ul>
<li>c+b d：退出在后台</li>
<li>c+b s：列出所有会话后可以切换</li>
<li>c+b $：重命名当前会话</li>
<li>tmux switch -t name|num //只能在<strong>tmux空间中执行</strong></li>
</ul>
</li>
</ul>
<h1 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h1><blockquote>
<p>窗口之间主要命令：如何切换</p>
<p>底部显示见截图就是窗口</p>
</blockquote>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200923151728.png" alt=""></p>
<ul>
<li><code>Ctrl+b c</code>：创建一个新窗口，状态栏会显示多个窗口的信息。</li>
<li><code>Ctrl+b p</code>：切换到上一个窗口（按照状态栏上的顺序）。</li>
<li><code>Ctrl+b n</code>：切换到下一个窗口。</li>
<li><code>Ctrl+b num</code>：切换到指定编号的窗口</li>
<li><code>Ctrl+b w</code>：从列表中选择窗口。</li>
<li><code>Ctrl+b ,</code>：<strong>窗口重命名</strong>。</li>
<li><code>Ctrl+b x</code>：只有一个窗口时，删除窗口(也就退出了回话)，多个窗格时删除当前窗格</li>
</ul>
<h1 id="窗格"><a href="#窗格" class="headerlink" title="窗格"></a>窗格</h1><blockquote>
<p>窗格主要操作：切分、交换位置、放大缩小、跳转</p>
</blockquote>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200923151501.png" alt=""></p>
<ul>
<li>切分<ul>
<li><code>Ctrl+b %</code>：划分左右两个窗格。</li>
<li><code>Ctrl+b &quot;</code>：划分上下两个窗格。</li>
<li><code>Ctrl+b q</code>：显示窗格编号。</li>
</ul>
</li>
<li>交换位置<ul>
<li><code>Ctrl+b {</code>：当前窗格左移。</li>
<li><code>Ctrl+b }</code>：当前窗格右移。</li>
<li><code>Ctrl+b Ctrl+o</code>：当前窗格上移。</li>
<li><code>Ctrl+b Alt+o</code>：当前窗格下移。<strong>用不了？</strong></li>
</ul>
</li>
<li>放大缩小<ul>
<li><code>Ctrl+b x</code>：关闭当前窗格。</li>
<li><code>Ctrl+b !</code>：将当前窗格拆分为一个独立窗口。</li>
<li><code>Ctrl+b z</code>：当前窗格全屏显示，再使用一次会变回原来大小。</li>
<li><code>Ctrl+b Ctrl+方向</code>：按箭头方向调整窗格大小，<strong>现在上下调整不了？</strong></li>
</ul>
</li>
<li>跳转<ul>
<li><code>Ctrl+b ;</code>：光标切换到上一个窗格。</li>
<li><code>Ctrl+b o</code>：光标切换到下一个窗格。</li>
<li>不能根据编号跳转？确实也没必要，一般不会很多窗口切分啊</li>
</ul>
</li>
</ul>
<h1 id="修改配置文件-ing"><a href="#修改配置文件-ing" class="headerlink" title="修改配置文件(ing)"></a>修改配置文件(ing)</h1><h1 id="常用场景"><a href="#常用场景" class="headerlink" title="常用场景"></a>常用场景</h1><h2 id="使用tmux查看压力测试"><a href="#使用tmux查看压力测试" class="headerlink" title="使用tmux查看压力测试"></a>使用tmux查看压力测试</h2><ul>
<li>stress -c 核心数</li>
<li>sensors<ul>
<li>install lm-sensors</li>
<li>sensors-detect </li>
</ul>
</li>
<li>htop</li>
<li>cat /proc/cpuinfo | grep MHz //获取当前运行频率<ul>
<li>watch -n 1 “cat /proc/cpuinfo | grep MHz” //每秒刷新</li>
</ul>
</li>
</ul>
<h1 id="Tmux其他配置"><a href="#Tmux其他配置" class="headerlink" title="Tmux其他配置"></a>Tmux其他配置</h1>]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux运维</tag>
      </tags>
  </entry>
  <entry>
    <title>Git教程</title>
    <url>/2020/01/05/GIT%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="初步上手：与github进行第一次“对话”"><a href="#初步上手：与github进行第一次“对话”" class="headerlink" title="初步上手：与github进行第一次“对话”"></a><a href="https://blog.csdn.net/huangqqdy/article/details/83032408" target="_blank" rel="noopener">初步上手</a>：与github进行第一次“对话”</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.注册账号&amp;下载软件：windows软件使用git for windows、linux直接安装git后配置</span><br><span class="line">2.配置环境：</span><br><span class="line"># 配置用户名</span><br><span class="line">git config --global user.name &quot;username&quot; //这个是本地的。可以不是github上，最好一致</span><br><span class="line"># 配置邮箱</span><br><span class="line">git config --global user.email &quot;username@email.com&quot;     //(&quot;username@email.com&quot;注册账号时用的邮箱)</span><br><span class="line">#生成SSH</span><br><span class="line">ssh-keygen -t rsa //连续三次回车，在~/.ssh目录(ssh文件为隐藏文件使用ls -a)找到id_rsa.pub,打开复制内容到github网页-设置-ssh keys页面粘贴</span><br><span class="line">#让ssh-agent读取私钥</span><br><span class="line">ssh-agent $SHELL</span><br><span class="line">ssh-add ~/.ssh/id_rsa_git</span><br><span class="line">#测试是否连接成功</span><br><span class="line">ssh -T git@github.com //注意：git@github.com中github.com是域名，根据公司域名的去修改，配置成功提示：Hi,XXX,You&apos;ve successfully.......</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="最简使用教程：传输文件到github"><a href="#最简使用教程：传输文件到github" class="headerlink" title="最简使用教程：传输文件到github"></a><a href="https://www.bootcss.com/p/git-guide/" target="_blank" rel="noopener">最简使用教程</a>：传输文件到github</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">必须走完完整的五步</span><br><span class="line">1.获取远程仓库：git clone git@xxx.git //一般格式</span><br><span class="line">2.本地操作|添加追踪文件：git add filename、git add .(使用这个注意编辑.gitigonre，不写代码暂时不用编辑gitigonre)</span><br><span class="line">3.本地操作|确认更改：git commit -m &quot;代码提交信息&quot;</span><br><span class="line">4.云端交互|推送本地文件：git push origin master(一般是先git pull)</span><br><span class="line">5.云端交互|获取云端最新文件：git pull</span><br></pre></td></tr></table></figure>
<h1 id="本地管理-保存到版本库、回退"><a href="#本地管理-保存到版本库、回退" class="headerlink" title="本地管理(保存到版本库、回退)"></a>本地管理(保存到版本库、回退)</h1><blockquote>
<p>1.本地管理主要就是工作区、缓存区(git add后)、版本库(git commit后的)</p>
</blockquote>
<h2 id="回退：根据commit之后产生的commit-id回退"><a href="#回退：根据commit之后产生的commit-id回退" class="headerlink" title="回退：根据commit之后产生的commit_id回退"></a>回退：根据commit之后产生的commit_id回退</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。</span><br><span class="line">2.穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本,获取commit_id</span><br><span class="line">3.要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。</span><br></pre></td></tr></table></figure>
<h2 id="查看工作区与版本库的区别"><a href="#查看工作区与版本库的区别" class="headerlink" title="查看工作区与版本库的区别"></a>查看工作区与版本库的区别</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用git diff HEAD -- filename命令可以查看工作区和版本库里面最新版本的区别</span><br></pre></td></tr></table></figure>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout -- readme.txt</span><br><span class="line">让这个文件回到最近一次git commit或git add时的状态。</span><br><span class="line">1.回到最近git commit的状态：readme.txt自修改后还没有被放到版本库，现在，撤销修改就回到和当前版本库一模一样的状态</span><br><span class="line">2.回到最近git add的状态:readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</span><br><span class="line"></span><br><span class="line">git reset HEAD readme.txt</span><br><span class="line">git reset命令既可以回退版本，也可以把暂存区的修改回退到工作区</span><br><span class="line">1.撤销已经git add的文件，先使用git reset</span><br></pre></td></tr></table></figure>
<h2 id="删除和重命名-直接操作文件后git-add也行"><a href="#删除和重命名-直接操作文件后git-add也行" class="headerlink" title="删除和重命名(直接操作文件后git add也行)"></a>删除和重命名(直接操作文件后git add也行)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.rename</span><br><span class="line">git mv -f oldfolder newfolder</span><br><span class="line">git add -u newfolder (-u选项会更新已经追踪的文件和文件夹)</span><br><span class="line">git commit -m &quot;changed the foldername whaddup&quot;</span><br><span class="line"></span><br><span class="line">2.delete</span><br><span class="line">git rm</span><br></pre></td></tr></table></figure>
<h1 id="远程管理：本地文件推送到云端"><a href="#远程管理：本地文件推送到云端" class="headerlink" title="远程管理：本地文件推送到云端"></a>远程管理：本地文件推送到云端</h1><blockquote>
<p>1.本地与远程建立连接(本地有仓库，与云端的仓库连接)</p>
<p>2.克隆(云端已经有仓库，克隆到本地，推荐)</p>
<p>注意：建立连接与克隆都是第一次初始化相关的操作，推荐克隆。除非环境没有网络，首先在本地完成了git仓库的初始化，这时可以使用建立连接的操作。</p>
<p>前置知识：</p>
<p>git add：缓存文件</p>
<p>git commit：提交版本库，推不推送无所谓，推送就是版本库中的的一起推送</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本地与云端建立连接</span><br><span class="line">1.本地已经使用git init建立了版本库</span><br><span class="line">2.云端已经建立好仓库(本地和云端的名字要一致)</span><br><span class="line">3.git remote add origin github链接 //origin是自定义的远程厂库的名字，下次推送的时候要用到</span><br><span class="line">4.git push -u origin master 第一次推送master分支的所有内容</span><br><span class="line"></span><br><span class="line">克隆</span><br><span class="line">git clone git链接</span><br><span class="line"></span><br><span class="line">日常推送 通用命令：</span><br><span class="line">1.git push origin master</span><br><span class="line">2.git pull //获取最新仓库文件，默认跟踪的服务器和分支来拉取</span><br><span class="line">注意：git pull出现冲突时</span><br><span class="line"></span><br><span class="line">1.用代码库中的文件完全覆盖本地工作版本：</span><br><span class="line">git reset --hard //整个库回退到上一次commit的版本</span><br><span class="line">git pull</span><br><span class="line">2.希望保留生产服务器上所做的改动,仅仅并入新配置项</span><br><span class="line">git stash //缓存修改</span><br><span class="line">git pull</span><br><span class="line">git stash pop //恢复缓存，缓冲前一定要add！！！！</span><br><span class="line">如果恢复缓冲报错git clean -d -fx //删除</span><br><span class="line"></span><br><span class="line">然后可以使用git diff -w +文件名 来确认代码自动合并的情况.</span><br></pre></td></tr></table></figure>
<h1 id="分支管理：进行隔离开发-暂时不做深入研究"><a href="#分支管理：进行隔离开发-暂时不做深入研究" class="headerlink" title="分支管理：进行隔离开发(暂时不做深入研究)"></a>分支管理：进行隔离开发(暂时不做深入研究)</h1><ul>
<li>查、删、创、切、合</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看分支：git branch</span><br><span class="line"></span><br><span class="line">创建分支：git branch &lt;name&gt;</span><br><span class="line"></span><br><span class="line">切换分支：git checkout &lt;name&gt;</span><br><span class="line"></span><br><span class="line">删除分支：git branch -d &lt;name&gt;</span><br><span class="line"></span><br><span class="line">进阶：</span><br><span class="line">强制切换分支(不提示当前分支未保存)：git checkout -f</span><br><span class="line">创建分支后并切换：git checkout -b</span><br><span class="line">合并某分支到当前分支：git merge &lt;name&gt;</span><br></pre></td></tr></table></figure>
<h1 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h1><ul>
<li>git log</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git log --oneline 查看简洁版本</span><br><span class="line">git log --author=Linus --oneline -5 查看指定用户提交的日志</span><br></pre></td></tr></table></figure>
<ul>
<li>git blame</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">查看某个文件的修改记录</span><br></pre></td></tr></table></figure>
<h1 id="效率提升：快捷键设置"><a href="#效率提升：快捷键设置" class="headerlink" title="效率提升：快捷键设置"></a>效率提升：快捷键设置</h1><ul>
<li>git设置快捷</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法1.git config --global alias.st status //global是针对当前用户，如果不加，只针对当前仓库</span><br><span class="line"> git config --global alias.cm &apos;commit -m&apos;</span><br><span class="line">方法2.vim ~/.gitconfig //.gitconfig为当前用户的配置文件。当前仓库的配置文件为.git/config</span><br><span class="line">[alias]</span><br><span class="line">st = status</span><br><span class="line">pl = pull</span><br><span class="line">ps = push</span><br><span class="line">a = add</span><br><span class="line">br = branch</span><br><span class="line">cm = commit -m</span><br></pre></td></tr></table></figure>
<ul>
<li>git 忽略不需要跟踪的文件：编辑.gitignore</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 收集中。。。。</span><br><span class="line"># Windows:</span><br><span class="line">Thumbs.db</span><br><span class="line">ehthumbs.db</span><br><span class="line">Desktop.ini</span><br><span class="line"># Python:</span><br><span class="line">*.py[cod]</span><br><span class="line">*.so</span><br><span class="line">*.egg</span><br><span class="line">*.egg-info</span><br><span class="line">dist</span><br><span class="line">build</span><br></pre></td></tr></table></figure>
<ul>
<li>自己的仓库中有其他clone仓库给i他<ul>
<li>删除clone仓库的.git目录：rm -rf .git</li>
<li>回到自己的仓库<ul>
<li>git rm -r –cached ./</li>
<li>git add .</li>
<li>git commit -m “”</li>
<li>git push</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="多用户git环境"><a href="#多用户git环境" class="headerlink" title="多用户git环境"></a>多用户git环境</h1><ul>
<li>自动切换使用密钥(关键问题)<ul>
<li>编辑ssh相关的config文件，目前看起来是可以使用，但是每次需要重新ssh-add，不太方便就</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>通用开发软件</category>
      </categories>
  </entry>
  <entry>
    <title>Markdown简明语法</title>
    <url>/2020/01/05/Markdown/</url>
    <content><![CDATA[<h1 id="Markdown简明语法"><a href="#Markdown简明语法" class="headerlink" title="Markdown简明语法"></a>Markdown简明语法</h1><hr>
<ul>
<li>Software:<a href="https://www.typora.io/" target="_blank" rel="noopener">I just use typora,typora is very good,i like typora</a></li>
<li>Learn:</li>
</ul>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">温馨提示：直接复制然后拷贝到typora可以看到效果</span><br><span class="line"># 这是一级标题</span><br><span class="line"></span><br><span class="line">## 这是二级标题</span><br><span class="line"></span><br><span class="line">.....最多六级</span><br><span class="line"></span><br><span class="line">**这是加粗的文字** 想要使用*，前面加\</span><br><span class="line"></span><br><span class="line">*这是倾斜的文字*</span><br><span class="line"></span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line"></span><br><span class="line">~~这是加删除线的文字~~</span><br><span class="line"></span><br><span class="line">分割线：</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&gt; 引用</span><br><span class="line"></span><br><span class="line">链接：[自定义名称](http://bug.dana-tech.com/)</span><br><span class="line"></span><br><span class="line">图片：![自定义名称可选，连接只能是网络图片](https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1957160034,4179078549&amp;fm=26&amp;gp=0.jpg)</span><br><span class="line"></span><br><span class="line">单行代码： `代码内容`</span><br><span class="line"></span><br><span class="line">代码块：标准语法是上下各有个```，typora做了优化只要最上面有```便可</span><br><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure>
<p>  代码…<br>  代码…<br>  代码…<br>​<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">表格：(typoras上很方便)，shift+enter为换行</span><br><span class="line">表格内换行：shift+enter</span><br><span class="line">|a|b|c| </span><br><span class="line"></span><br><span class="line">[页面跳转](#这是一级标题) #只能跳转标题，和网络链接的区别就是前面加了#</span><br><span class="line"></span><br><span class="line">图标：使用:英文字母 可以显示图标</span><br><span class="line"></span><br><span class="line">脚注[^1] 【编辑】-【脚注】hexo不支持</span><br><span class="line"></span><br><span class="line">插入视频&lt;video src=&quot;xxx.mp4&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><p>…..最多六级</p>
<p><strong>这是加粗的文字</strong></p>
<p><em>这是倾斜的文字</em></p>
<p><strong><em>这是斜体加粗的文字</em></strong></p>
<p><del>这是加删除线的文字</del></p>
<h2 id="分割线："><a href="#分割线：" class="headerlink" title="分割线："></a>分割线：</h2><blockquote>
<p>引用</p>
</blockquote>
<p>链接：<a href="http://bug.dana-tech.com/" target="_blank" rel="noopener">自定义名称</a></p>
<p>图片：<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1957160034,4179078549&amp;fm=26&amp;gp=0.jpg" alt="自定义名称可选，连接只能是网络图片"></p>
<p>单行代码： <code>代码内容</code></p>
<p>代码块：标准语法是上下各有个<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>  代码…<br>  代码…<br>  代码…<br><code>`</code></p>
<p>表格：(typoras上很方便)</p>
<table>
<thead>
<tr>
<th>a</th>
<th>b</th>
<th>c</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td>1<br>1</td>
</tr>
</tbody>
</table>
<p><a href="#这是一级标题">页面跳转</a> #只能跳转标题，和网络链接的区别就是前面加了#</p>
<p>:v:</p>
<p>脚注[^1]</p>
<p>[^1]: I’m yours</p>
]]></content>
      <categories>
        <category>通用开发软件</category>
      </categories>
  </entry>
  <entry>
    <title>Minicom设置&amp;保存日志</title>
    <url>/2020/01/05/Minicom%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="要用它做什么？"><a href="#要用它做什么？" class="headerlink" title="要用它做什么？"></a>要用它做什么？</h1><p>1.跨天保存日志到指定目录 <strong>未实现</strong></p>
<p>2.发送串口命令 <strong>自动发送未实现</strong></p>
<p>3.接入多个设备串口</p>
<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>minicom: cannot open /dev/modem: No such file or directory</p>
<p>解决:ln -s /dev/ttyS0 /dev/modem</p>
<ul>
<li>查看usb串口设备：ls -l /dev/ttyUSB*</li>
<li>查看是否有串口芯片：lsusb</li>
</ul>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200605153348.png" alt=""></p>
<a id="more"></a>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul>
<li>minicom -s进入了minicom的配置界面———–<strong>最开始使用一定要配置，后面多端口使用似乎不用再配置了</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.选择serial port setup</span><br><span class="line">2.如图</span><br><span class="line">3.Save setup as dfl </span><br><span class="line">4.关键就是Hardware Flow Control需要关闭</span><br></pre></td></tr></table></figure>
<p><img src="photo/image-20200605153557285.png" alt="image-20200605153557285"></p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">minicom minicom -D /dev/ttyUSBx -c on -C HQ1CloundLost$(date +%Y-%m-%d_%H:%M:%S).log //指定串口设备、打开颜色支持、创建文件</span><br><span class="line"></span><br><span class="line">ctrl+a n 显示时间戳同时也会保存到文件</span><br><span class="line">ctrl+a z 显示支持的操作</span><br></pre></td></tr></table></figure>
<h2 id="设置硬件时间-amp-系统时间同步-不需要网络"><a href="#设置硬件时间-amp-系统时间同步-不需要网络" class="headerlink" title="设置硬件时间&amp;系统时间同步(不需要网络)"></a>设置硬件时间&amp;系统时间同步(不需要网络)</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hwclock --set --date &quot;20200107 10:34:10&quot;</span><br><span class="line">hwclock -s</span><br></pre></td></tr></table></figure>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p><a href="https://www.cnblogs.com/zqb-all/p/9786836.html" target="_blank" rel="noopener">写脚本</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux常用开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>Picgo床图</title>
    <url>/2020/01/05/Picgo%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="Github床图"><a href="#Github床图" class="headerlink" title="Github床图"></a>Github床图</h2><ol>
<li>创建github仓库，<strong>只能是pulic公开类型，不然不能访问</strong></li>
<li>生成一个Token用于操作仓库，setting-Developer settings-Personal access tokens-Generate new token-按照图片选好</li>
<li><strong>创建成功后，会生成一串token，这串token之后不会再显示，所以第一次看到的时候，就要好好保存</strong></li>
</ol>
<a id="more"></a>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200923163544.png" style="zoom:80%;"></p>
<p>4.设置picgo</p>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200923163612.png" style="zoom:80%;"></p>
<h2 id="Gitee床图"><a href="#Gitee床图" class="headerlink" title="Gitee床图"></a>Gitee床图</h2><ul>
<li>安装插件【gitee】</li>
<li>基本配置同github，这里已经保存在keepass了，迁移都很方便</li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Python&amp;pycharm安装</title>
    <url>/2020/01/05/Python%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h1><blockquote>
<p>安装文件上传到github或者百度网盘</p>
</blockquote>
<p>1.安装python：安装完后，可以直接使用(cmd输入python)注意设置全局变量（可以everthing去搜索python路径），在windows中’我的电脑—–&gt;右键属性—-&gt;高级系统设置—-&gt;环境变量—–&gt;系统变量PATH’</p>
<p>直接install now</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">路径最后一位为python36-32</span><br><span class="line">安装完成后在CMD中输入：</span><br><span class="line">python</span><br><span class="line">显示版本号</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>2.安装pycharm，选择64bit，关联.py，下一步就可。<a href="https://www.cnblogs.com/QYGQH/p/7569769.html" target="_blank" rel="noopener">汉化</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">激活方式均选择License server。</span><br><span class="line">第一服务器License server address: http://39.105.114.41:1027</span><br><span class="line">第二服务器License server address: http://36.110.99.11:3456</span><br><span class="line">已过期</span><br></pre></td></tr></table></figure>
<p>3.安装pip</p>
<p>pycharm自带pip，将其添加到系统环境即可，常见的路径为：</p>
<p>C:\Users\Administrator\AppData\Local\Programs\Python\Python36-32\Scripts</p>
<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python环境</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机常见词汇</title>
    <url>/2020/01/05/Vocabulary/</url>
    <content><![CDATA[<h1 id="开发英语单词"><a href="#开发英语单词" class="headerlink" title="开发英语单词"></a>开发英语单词</h1><ul>
<li>release 发布</li>
<li>platforms 平台</li>
<li>sensors 传感器</li>
<li>collective 集体</li>
<li>evolved 进化</li>
</ul>
<a id="more"></a>
<ul>
<li>bounds 界限</li>
<li>leaps 飞跃</li>
<li>encrypte 加密器</li>
<li>predictive 预测</li>
<li>Authorization Levels 授权级别</li>
<li>motion 运动</li>
<li>Significant 重要的</li>
<li>segments 部分</li>
<li>progress 进步</li>
<li>accuracy 精确</li>
</ul>
]]></content>
      <categories>
        <category>English</category>
      </categories>
      <tags>
        <tag>计算机英语</tag>
      </tags>
  </entry>
  <entry>
    <title>Zsh环境配置</title>
    <url>/2020/01/05/zsh+OhMyZsh&amp;Powerline/</url>
    <content><![CDATA[<p>[TOC]</p>
<a id="more"></a>
<h1 id="zsh安装"><a href="#zsh安装" class="headerlink" title="zsh安装"></a>zsh安装</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装：sudo apt-get install zsh</span><br><span class="line"></span><br><span class="line">设置：chsh -s /bin/zsh(注意不要使用sudo)</span><br><span class="line"></span><br><span class="line">检验：sudo echo $SHELL //可能需要重启一下才会变成zsh</span><br></pre></td></tr></table></figure>
<h1 id="OhMyZsh"><a href="#OhMyZsh" class="headerlink" title="OhMyZsh"></a><a href="https://www.jianshu.com/p/2c9cc1eb2548" target="_blank" rel="noopener">OhMyZsh</a></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装：sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br><span class="line">更新</span><br><span class="line">sh -c &quot;$(wget https://github.com/ohmyzsh/ohmyzsh/tree/master/tools/install.sh -O -)&quot;//这是啥</span><br><span class="line">安装完后可以安装插件，配置主题：vim ~/.zshrc</span><br><span class="line">推荐主题：</span><br><span class="line">ys </span><br><span class="line">dallas</span><br><span class="line">fino</span><br><span class="line">adben</span><br><span class="line">linuxonly</span><br><span class="line">trapd00r</span><br><span class="line">frisk</span><br><span class="line">sonicradish</span><br><span class="line">candy</span><br><span class="line">dieter</span><br><span class="line">junkfood</span><br><span class="line">strug</span><br><span class="line">jispwoso</span><br><span class="line">maran</span><br></pre></td></tr></table></figure>
<h1 id="其他工具"><a href="#其他工具" class="headerlink" title="其他工具"></a>其他工具</h1><h2 id="autojump-瞬移神器-j-关键词"><a href="#autojump-瞬移神器-j-关键词" class="headerlink" title="autojump:瞬移神器 j +关键词"></a>autojump:瞬移神器 <code>j +关键词</code></h2><p>  安装教程：</p>
<ul>
<li>sudo apt-get install autojump</li>
<li>vim .zshrc 加上<code>[[ -s ~/.autojump/etc/profile.d/autojump.sh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh</code></li>
<li>centos需要额外安装autojump-zsh</li>
<li>编辑~/.zshrc：添加plugins=(git autojump)</li>
<li>在使用<code>j xxxx</code>前,要先<code>cd xxx/xxxx</code>一次</li>
<li>查看记录/配置文件: <code>j --stat</code></li>
<li><p>source ~/.zshrc重新编译zsh</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">例子：</span><br><span class="line">当前在 /home/danale</span><br><span class="line">j zhou</span><br><span class="line">就会跳转到含有我的名字：zhouxingyu的文件夹</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="zsh-autosuggestion：显示历史命令"><a href="#zsh-autosuggestion：显示历史命令" class="headerlink" title="zsh-autosuggestion：显示历史命令"></a>zsh-autosuggestion：显示历史命令</h2>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">安装：</span><br><span class="line">git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestions</span><br><span class="line"># 打开 zsh 配置文件</span><br><span class="line">vim ~/.zshrc</span><br><span class="line">  </span><br><span class="line"># 把插件名称加入插件列表</span><br><span class="line">plugins=(zsh-autosuggestions)</span><br><span class="line">source ~/.zshrc重新编译zsh</span><br></pre></td></tr></table></figure>
<h2 id="zsh-syntax-highlighting：命令语法高亮"><a href="#zsh-syntax-highlighting：命令语法高亮" class="headerlink" title="zsh-syntax-highlighting：命令语法高亮"></a>zsh-syntax-highlighting：命令语法高亮</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/zsh-users/zsh-syntax-highlighting.git </span><br><span class="line">echo &quot;source $&#123;(q-)PWD&#125;/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh&quot; &gt;&gt; $&#123;ZDOTDIR:-$HOME&#125;/.zshrc</span><br><span class="line"></span><br><span class="line">source ~/.zshrc重新编译zsh</span><br></pre></td></tr></table></figure>
<h2 id="PowerLine-麻烦，就是更加美观ing"><a href="#PowerLine-麻烦，就是更加美观ing" class="headerlink" title="PowerLine(麻烦，就是更加美观ing)"></a>PowerLine(麻烦，就是更加美观ing)</h2><p><a href="https://www.jianshu.com/p/2c9cc1eb2548" target="_blank" rel="noopener">参考教程</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone http://github.com/powerline/fonts</span><br><span class="line">(包含很多可用字体，安装过程慢，请找到网速好的地方)</span><br><span class="line">安装完成后，为该目录加个权限：chmod 755 fonts</span><br><span class="line">直接fc-cache -fv fonts</span><br><span class="line"></span><br><span class="line">安装完后要去选择字体</span><br><span class="line">放大终端----&gt;左上角点击终端，配置文件首选项---&gt;找到自定义字体，选择带powerline的</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux运维</tag>
      </tags>
  </entry>
  <entry>
    <title>通用代码注释</title>
    <url>/2020/01/05/%E4%BB%A3%E7%A0%81%E6%96%87%E4%BB%B6%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="开始：代码说明文件"><a href="#开始：代码说明文件" class="headerlink" title="开始：代码说明文件"></a>开始：代码说明文件</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*************************************************   </span><br><span class="line">Author:       Version:        Date: // 作者、版本及完成日期   </span><br><span class="line">Description: // 用于详细说明此程序文件完成的主要功能</span><br><span class="line"></span><br><span class="line">Log：(从新到旧排序)</span><br><span class="line">V1.0 修改、更新</span><br><span class="line"></span><br><span class="line">*************************************************/  </span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>
<h1 id="函数描述"><a href="#函数描述" class="headerlink" title="函数描述"></a>函数描述</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/*************************************************   </span><br><span class="line">**Function:       // 函数名称   </span><br><span class="line">**Description:    // 函数功能、性能等的描述   </span><br><span class="line">**Calls:          // 被本函数调用的函数清单，用了那些函数 </span><br><span class="line">**Called By:      // 调用本函数的函数清单，在哪里被用   </span><br><span class="line">Table Accessed: // 被访问的表（此项仅对于牵扯到数据库操作的程序）   </span><br><span class="line">Table Updated:  // 被修改的表（此项仅对于牵扯到数据库操作的程序）   </span><br><span class="line">**Input:          // 输入参数说明，包括每个参数的作用、取值说明及参数间关系。   </span><br><span class="line">**Output:         // 对输出参数的说明。   </span><br><span class="line">**Return:         // 函数返回值的说明   </span><br><span class="line">Others:         // 其它说明</span><br><span class="line">*************************************************/</span><br></pre></td></tr></table></figure>
<h1 id="常用命名单词"><a href="#常用命名单词" class="headerlink" title="常用命名单词"></a>常用命名单词</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add / remove       begin / end        create / destroy  insert / delete    first / last       get / release increment / decrement                 put / get add / delete       lock / unlock      open / close min / max          old / new          start / stop next / previous    source / target    show / hide send / receive     source / destination cut / paste        up / down</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>代码规范</category>
      </categories>
      <tags>
        <tag>文档规范</tag>
      </tags>
  </entry>
  <entry>
    <title>正则表达式</title>
    <url>/2020/01/05/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="正则表达式-regular-expression"><a href="#正则表达式-regular-expression" class="headerlink" title="正则表达式(regular expression)"></a>正则表达式(regular expression)</h1><p>[TOC]</p>
<h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><hr>
<blockquote>
<p>$ ( ) * + . ? [ \  ^ { |</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^</span><br><span class="line">开始位置，中括号中对字符集求反。</span><br><span class="line"></span><br><span class="line">$</span><br><span class="line">字符串结尾的位置。</span><br><span class="line"></span><br><span class="line">( )</span><br><span class="line">标记子表达式的开始和结束。可以捕获子表达式以供以后使用。</span><br><span class="line"></span><br><span class="line">*</span><br><span class="line">零次或多次匹配前面的字符或子表达式。</span><br><span class="line"></span><br><span class="line">+</span><br><span class="line">一次或多次匹配前面的字符或子表达式。</span><br><span class="line"></span><br><span class="line">.</span><br><span class="line">匹配除换行符 \n 之外的任何单个字符。</span><br><span class="line"></span><br><span class="line">[ ]</span><br><span class="line">标记中括号表达式的开始。</span><br><span class="line"></span><br><span class="line">?</span><br><span class="line">零次或一次匹配前面的字符或子表达式，或指示“非贪心”限定符。</span><br><span class="line"></span><br><span class="line">\</span><br><span class="line">将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，字符 n 匹配字符 n。\n 匹配换行符。</span><br><span class="line"></span><br><span class="line">/</span><br><span class="line">表示文本正则表达式的开始或结束。</span><br><span class="line"></span><br><span class="line">&#123; &#125;</span><br><span class="line">标记限定符表达式的开始。</span><br><span class="line"></span><br><span class="line">|</span><br><span class="line">指出在两个项之间进行选择。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="匹配与限制"><a href="#匹配与限制" class="headerlink" title="匹配与限制"></a>匹配与限制</h1><hr>
<blockquote>
<p>匹配：匹配怎样的数据：单个、一类</p>
<p>限制：找到数据的规律后如何通过限制手段提取想要的数据：量词、边界、逻辑符、定位</p>
</blockquote>
<h2 id="匹配-单个"><a href="#匹配-单个" class="headerlink" title="匹配|单个"></a>匹配|单个</h2><blockquote>
<p>1.直接使用相应字符</p>
<p>2.\转义字符</p>
</blockquote>
<h2 id="匹配-一类"><a href="#匹配-一类" class="headerlink" title="匹配|一类"></a>匹配|一类</h2><blockquote>
<p>1.[]里面的就是一类字符</p>
<p>2.预定义字符</p>
</blockquote>
<ol>
<li><p>[]:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- [0-9]、[^0-9]</span><br><span class="line">- [a-z]、[a-d[m-p]]、[a-z&amp;&amp;[def]]...</span><br></pre></td></tr></table></figure>
</li>
<li><p>预定义字符：大写代表非</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- \d：数字：[0-9]</span><br><span class="line">- \s：空白字符包括\t、\n、\f、\r</span><br><span class="line">- \w：单词：[a-zA-Z_0-9]注意是：字母、数字和下划线</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="限制-量词"><a href="#限制-量词" class="headerlink" title="限制|量词"></a>限制|量词</h2><blockquote>
<p>1.匹配一个或者是一类都是匹配一个字符，因此需要数量限制</p>
<p>2.量词：个数、greedy(贪心)、reluctant(懒惰)?、possessive(占有)+</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.个数：&#123;10&#125;10次、&#123;10,&#125;至少十次、&#123;10,20&#125;至少10次，不超过20次</span><br><span class="line">*零或多</span><br><span class="line">+一或多、代表占有类型</span><br><span class="line">？零或一、代表懒惰</span><br><span class="line">2.greedy贪心：匹配最长，读取字符串从后向前匹配</span><br><span class="line">3.reluctant懒惰：匹配最短，从前往后匹配</span><br><span class="line">4.possessive占有：完全匹配，必须完全一样</span><br><span class="line">例子：匹配：12a34abc </span><br><span class="line">greedy(贪心)：格式：1.*a 结果：12a34a</span><br><span class="line">reluctant(懒惰)?：格式：1.*?a 结果：12a</span><br><span class="line">possessive(占有)+：格式：1.*+a 结果：无 ？？？？？？只能匹配开头为1，结尾为a的</span><br></pre></td></tr></table></figure>
<h2 id="限制-定位"><a href="#限制-定位" class="headerlink" title="限制|定位"></a>限制|定位</h2><blockquote>
<p>1.确定字符的所处位子</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">^</span><br><span class="line">行的开头</span><br><span class="line">$</span><br><span class="line">行的结尾</span><br><span class="line">\b</span><br><span class="line">单词边界</span><br><span class="line">\B</span><br><span class="line">非单词边界</span><br><span class="line">\A</span><br><span class="line">输入的开头</span><br><span class="line">\G</span><br><span class="line">上一个匹配的结尾</span><br><span class="line">用得较多的为前三个，这里主要介绍\b</span><br><span class="line">例子：匹配My cat is brown中的cat，但是不会匹配category或是bobcat</span><br><span class="line">\\bcat\\b</span><br></pre></td></tr></table></figure>
<h2 id="限制-逻辑符"><a href="#限制-逻辑符" class="headerlink" title="限制|逻辑符"></a>限制|逻辑符</h2><blockquote>
<p>常用的逻辑</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XY</span><br><span class="line">X  后跟 Y</span><br><span class="line"></span><br><span class="line">X|Y</span><br><span class="line">X  或 Y</span><br><span class="line"></span><br><span class="line">(X)</span><br><span class="line">X，作为捕获组</span><br></pre></td></tr></table></figure>
<h2 id="限制-向前向后"><a href="#限制-向前向后" class="headerlink" title="限制|向前向后"></a>限制|向前向后</h2><blockquote>
<p>1.向前向后</p>
<p>2.向前向后取非</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">向前查找 ?= ，需要匹配的文本放在=的后面，并且匹配的文本在结果中将被剔除</span><br><span class="line">例子：提取url</span><br><span class="line">http:</span><br><span class="line">https:</span><br><span class="line">ftp:</span><br><span class="line">匹配：.+(?=:)//:将被剔除，对比.+(:)可知</span><br><span class="line"></span><br><span class="line">向后查找 ?&lt;=,需要匹配的文本放在=的后面,并且匹配的文本在结果中将被剔除</span><br><span class="line">例子：删除货币符号$，提取数字</span><br><span class="line">cat:$1</span><br><span class="line">dog:$2</span><br><span class="line">匹配：(?&lt;=\$)[0-9.]+</span><br></pre></td></tr></table></figure>
<h1 id="回溯：前后一致"><a href="#回溯：前后一致" class="headerlink" title="回溯：前后一致"></a>回溯：前后一致</h1><blockquote>
<p>1.开头和结尾一致，开头的已经匹配好，结尾直接引用</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用&quot;()&quot;将要匹配的关键词包裹，可以有多个()，例子：</span><br><span class="line">$stage1_b =~ stage1:T-.+-upperbody\[\(([0-9]+),([0-9]+)\),\(.+?\),\(([0-9]+),([0-9]+)\),\(.+?\)\]-gesture\[\(([0-9]+),([0-9]+)\),\(.+?\),\(([0-9]+),([0-9]+)\),\(.+?\)\] ]];</span><br><span class="line">\1、\2、\3......可以在正则表达式里按照顺序引用()里面的已经匹配好的</span><br><span class="line">$1、$2、$3......可以在脚本中替换()匹配的内容</span><br><span class="line">1.例子：&lt;H1&gt;wellcome&lt;/H1&gt; </span><br><span class="line">	   &lt;H2&gt;wellcome&lt;/H2&gt; </span><br><span class="line">	   &lt;H2&gt;wellcome&lt;/H3&gt;  //错误格式</span><br><span class="line">	   错误匹配：&lt;H[1-6]&gt;.*?&lt;/H[1-6]&gt; //可能的结果：直接匹配&lt;H1&gt;到&lt;/H3&gt;</span><br><span class="line">	   正确匹配：&lt;H[1-6]&gt;.*?&lt;/H\1&gt;</span><br></pre></td></tr></table></figure>
<h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">网址（URL）</span><br><span class="line">[a-zA-z]+://[^\s]*</span><br><span class="line"></span><br><span class="line">IP地址(IP Address)</span><br><span class="line">((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)</span><br><span class="line"></span><br><span class="line">电子邮件(Email)</span><br><span class="line">\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</span><br><span class="line"></span><br><span class="line">QQ号码</span><br><span class="line">[1-9]\d&#123;4,&#125;</span><br><span class="line"></span><br><span class="line">HTML标记(包含内容或自闭合)</span><br><span class="line">&lt;(.*)(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt;</span><br><span class="line"></span><br><span class="line">密码(由数字/大写字母/小写字母/标点符号组成，四种都必有，8位以上)</span><br><span class="line">(?=^.&#123;8,&#125;$)(?=.*\d)(?=.*\W+)(?=.*[A-Z])(?=.*[a-z])(?!.*\n).*$</span><br><span class="line"></span><br><span class="line">日期(年-月-日)</span><br><span class="line">(\d&#123;4&#125;|\d&#123;2&#125;)-((0?([1-9]))|(1[1|2]))-((0?[1-9])|([12]([1-9]))|(3[0|1]))</span><br><span class="line"></span><br><span class="line">日期(月/日/年)</span><br><span class="line">((0?[1-9]&#123;1&#125;)|(1[1|2]))/(0?[1-9]|([12][1-9])|(3[0|1]))/(\d&#123;4&#125;|\d&#123;2&#125;)</span><br><span class="line"></span><br><span class="line">时间(小时:分钟, 24小时制)</span><br><span class="line">((1|0?)[0-9]|2[0-3]):([0-5][0-9])</span><br><span class="line"></span><br><span class="line">汉字(字符)</span><br><span class="line">[\u4e00-\u9fa5]</span><br><span class="line"></span><br><span class="line">中文及全角标点符号(字符)</span><br><span class="line">[\u3000-\u301e\ufe10-\ufe19\ufe30-\ufe44\ufe50-\ufe6b\uff01-\uffee]</span><br><span class="line"></span><br><span class="line">中国大陆固定电话号码</span><br><span class="line">(\d&#123;4&#125;-|\d&#123;3&#125;-)?(\d&#123;8&#125;|\d&#123;7&#125;)</span><br><span class="line"></span><br><span class="line">中国大陆手机号码</span><br><span class="line">1[356789]\d&#123;9&#125;</span><br><span class="line"></span><br><span class="line">中国大陆邮政编码</span><br><span class="line">[1-9]\d&#123;5&#125;</span><br><span class="line"></span><br><span class="line">中国大陆身份证号(15位或18位)</span><br><span class="line">\d&#123;15&#125;(\d\d[0-9xX])?</span><br><span class="line"></span><br><span class="line">非负整数(正整数或零)</span><br><span class="line">\d+</span><br><span class="line"></span><br><span class="line">正整数</span><br><span class="line">[0-9]*[1-9][0-9]*</span><br><span class="line"></span><br><span class="line">负整数</span><br><span class="line">-[0-9]*[1-9][0-9]*</span><br><span class="line"></span><br><span class="line">整数</span><br><span class="line">-?\d+</span><br><span class="line"></span><br><span class="line">小数</span><br><span class="line">(-?\d+)(\.\d+)?</span><br></pre></td></tr></table></figure>
<h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2>]]></content>
      <categories>
        <category>通用开发软件</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu系统环境与常用软件配置</title>
    <url>/2020/01/05/ubuntu%E7%B3%BB%E7%BB%9F%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h1><h1 id="常用软件安装"><a href="#常用软件安装" class="headerlink" title="常用软件安装"></a>常用软件安装</h1><h2 id="Securecrt"><a href="#Securecrt" class="headerlink" title="Securecrt"></a>Securecrt</h2><ul>
<li><p>百度网盘已下载，官网下载要注册</p>
</li>
<li><p>安装</p>
<ul>
<li><p>步骤：</p>
<p>安装：sudo dpkg -i scrt-7.3.4-839.ubuntu13-64.x86_64.deb</p>
<p><a href="https://blog.csdn.net/a499957739/article/details/79582999" target="_blank" rel="noopener">破解</a>：sudo perl securecrt_linux_crack.pl 填相应信息</p>
</li>
<li><p>问题：libpng12-dev：<code>apt-cache search libpng 可以看到libpng12-dev，apt install libpng12-dev 应该就可以了。</code></p>
</li>
</ul>
</li>
</ul>
<h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install flameshot</span><br><span class="line">设置&gt;设备&gt;键盘，设置一个自定义快捷键（拉到最下面）命令填写：flameshot gui</span><br><span class="line">截完图后保存Ctrl+S，复制到剪贴板 Ctrl+C</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux常用开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux网络文件共享</title>
    <url>/2020/01/05/%E7%BD%91%E7%BB%9C%E5%AD%98%E5%82%A8TFTP%E4%B8%8ENFS/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="TFTP"><a href="#TFTP" class="headerlink" title="TFTP"></a>TFTP</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install tftpd-hpa</span><br><span class="line">sudo service tftpd-hpa start</span><br><span class="line">sudo service tftpd-hpa stop</span><br><span class="line">sudo service tftpd-hpa restart</span><br><span class="line"></span><br><span class="line">sudo vi /etc/default/tftpd-hpa   //配置文件</span><br><span class="line">TFTP_USERNAME=&quot;tftp&quot;			//tftp服务的用户名	</span><br><span class="line">TFTP_DIRECTORY=&quot;/home/danale/tftp&quot; //文件只能在该目录中下载,可以用默认的，也可以创建自己的！</span><br><span class="line">TFTP_ADDRESS=&quot;0.0.0.0:69&quot; 	  // tftp服务器的地址和端口</span><br><span class="line">TFTP_OPTIONS=&quot;-l -c -s&quot; 		//tftp服务的选项,不用管照抄</span><br></pre></td></tr></table></figure>
<p>开发板使用：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tftp -g -r filename tftp_server_addr //下载</span><br><span class="line">tftp -p -l filename tftp_server_addr //上传</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>-g get 获取文件<br>-r 递归<br>-p put 发送文件<br>-l local 本地的</p>
<h1 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a>NFS</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nfs-kernel-server//服务端</span><br><span class="line">sudo apt install nfs-common //客户端</span><br><span class="line">sudo service nfs-kernel-server start</span><br><span class="line">// 启动这些服务均可使用：service + 服务(tab)可以补全</span><br><span class="line"></span><br><span class="line">sudo vim /etc/exports</span><br><span class="line">/home/danale/nfs *(rw,sync,no_root_squash) //记得创建文件夹或者用默认的</span><br><span class="line">//* 代表所有IP均可访问</span><br></pre></td></tr></table></figure>
<p>配置好开发板和ubuntu的IP，hi开发板使用：<br>mount -o nolock,tcp ip:/home/danale/nfs /mnt</p>
<p>mount -t nfs ip:/FilePath /mnt</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux运维</tag>
      </tags>
  </entry>
  <entry>
    <title>AndroidtTool环境变量</title>
    <url>/2019/12/11/Android%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<ul>
<li>获取安装包解压：build-tools、platform-tools、tools……常用一个是platform-tools里面的ADB</li>
<li>放置文件夹到某个易找到的目录</li>
<li>新建SDK系统变量，路径<code>直接搜索环境变量！</code><ul>
<li>将ANDROID_HOME添加到环境变量中后，可以代表路径C:\androidsdk</li>
</ul>
</li>
</ul>
<a id="more"></a>
<p><img src="https://uploader.shimo.im/f/7Go5vUPpdNAqY5d2.png!thumbnail" alt="img"></p>
<p><img src="https://uploader.shimo.im/f/ghSvYMLDaUMSEukZ.png!thumbnail" alt="img"></p>
<ul>
<li>编辑PATH变量，将build-tools、platform-tools、tools的路径分别加进去</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量值：</span><br><span class="line">%ANDROID_HOME%\tools</span><br><span class="line">%ANDROID_HOME%\platform-tools</span><br><span class="line">%ANDROID_HOME%\build-tools</span><br><span class="line">（注意：win10下要分行编辑，且末尾没有分号）</span><br></pre></td></tr></table></figure>
<p><img src="https://uploader.shimo.im/f/td17tx5z2ZcsnTZR.png!thumbnail" alt="img">      </p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android环境</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker使用</title>
    <url>/2019/10/19/Docker%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h1><p>[TOC]</p>
<h2 id="创建哪些环境"><a href="#创建哪些环境" class="headerlink" title="创建哪些环境"></a>创建哪些环境</h2><p>1.网页</p>
<p>2.交叉编译</p>
<p>3.python</p>
<blockquote>
<p>连接Docker ssh：</p>
<p>ssh root@localhost -p port</p>
</blockquote>
<ul>
<li>文件拷贝</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps //获取dockerID、name</span><br><span class="line">docker cp /path name|ID:/path //从docker到源</span><br><span class="line">docker cp name|ID:/path /path //从源-docker</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="安装与测试"><a href="#安装与测试" class="headerlink" title="安装与测试"></a>安装与测试</h2><ul>
<li>测试：sudo docker run hello-world</li>
</ul>
<h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><ul>
<li>docker pull centos:7</li>
</ul>
<h2 id="运行镜像，生成容器"><a href="#运行镜像，生成容器" class="headerlink" title="运行镜像，生成容器"></a>运行镜像，生成容器</h2><ul>
<li>docker run -itd –name centos-test centos:7<ul>
<li>解析：<ul>
<li>i： 允许你对容器内的标准输入 (STDIN) 进行交互。</li>
<li>t：在新容器内指定一个伪终端或终端。</li>
<li>d：以进程方式运行的容器</li>
<li>–name centos-test：命名，方便使用(不然就是一串数字)</li>
</ul>
</li>
</ul>
</li>
<li>停止： <strong>docker stop</strong>  name</li>
<li>docker ps 查看是否还存在</li>
</ul>
<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><ul>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo docker exec -it centos-test /bin/bash </span><br><span class="line">会跳转到此容器中，使用ctrl+d 或者exit可以退出，但是使用exec运行的容器依然在后台</span><br></pre></td></tr></table></figure>
</li>
<li><p>docker ps -a 查看运行过的、所有的</p>
<ul>
<li>使用docker start 重新运行被关闭的容器(环境均还在)</li>
</ul>
</li>
</ul>
<h2 id="使用需求"><a href="#使用需求" class="headerlink" title="使用需求"></a>使用需求</h2><ul>
<li>在容器中搭建好环境后，将环境保存打包(类似vm里面保存整个镜像包)</li>
<li>容器与宿主之间文件交互</li>
</ul>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>Frp远程访问SSH</title>
    <url>/2019/10/19/Frp%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AESSH/</url>
    <content><![CDATA[<p>[TOC]</p>
<p><a href="https://blog.csdn.net/u013144287/article/details/78589643/" target="_blank" rel="noopener">Frp参考链接</a></p>
<p><a href="https://diannaobos.com/post/399.html" target="_blank" rel="noopener">Symtemctl控制开关机</a></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>下载 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：服务端与客户端的版本要一样   </span><br><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.32.1/frp_0.32.1_linux_amd64.tar.gz</span><br><span class="line">arm板</span><br><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.32.1/frp_0.32.1_linux_arm64.tar.gz</span><br></pre></td></tr></table></figure>
<ul>
<li>解压</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tar -zxvf  frp_0.32.1_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>
<ul>
<li>开启tmux，在后台运行</li>
<li>注意：==服务端与用户端版本必须一致==</li>
</ul>
<a id="more"></a>
<h2 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h2><ul>
<li>删除：frpc、frpc.ini //其实可以不删除</li>
<li>编辑：vim ./frps.ini</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">bind_port = 7000           #与客户端绑定的进行通信的端口 选一个没人用的</span><br></pre></td></tr></table></figure>
<ul>
<li>运行<code>./frps -c ./frps.ini</code></li>
</ul>
<h2 id="配置客户端"><a href="#配置客户端" class="headerlink" title="配置客户端"></a>配置客户端</h2><ul>
<li>删除：frps、frps.ini //其实可以不删除</li>
<li>编辑：vim ./frpc.ini</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = IP              #公网服务器ipI</span><br><span class="line">server_port = 7000            #与服务端bind_port一致</span><br><span class="line"> </span><br><span class="line">#公网通过ssh访问内部服务器</span><br><span class="line">[ssh]</span><br><span class="line">type = tcp              #连接协议</span><br><span class="line">local_ip = 127.0.0.0    #内网服务器ip,填写127.0.0.0即可，如果是路由器上跑可能要做别的配置</span><br><span class="line">local_port = 22         #ssh默认端口号</span><br><span class="line">remote_port = 6000      #自定义的访问内部ssh端口号</span><br></pre></td></tr></table></figure>
<ul>
<li>运行<code>./frpc -c ./frpc.ini</code></li>
</ul>
<h2 id="远程访问连接"><a href="#远程访问连接" class="headerlink" title="远程访问连接"></a>远程访问连接</h2><h3 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h3><p>更改端口号，正常使用SSH即可，实际上我们是连接上服务器，服务器22端口映射到主机的端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh root@ip -p port</span><br></pre></td></tr></table></figure>
<h3 id="Windows远程"><a href="#Windows远程" class="headerlink" title="Windows远程"></a>Windows远程</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">frpc使用3389端口，使用windows自带的远程桌面连接</span><br></pre></td></tr></table></figure>
<h3 id="VNC"><a href="#VNC" class="headerlink" title="VNC"></a>VNC</h3><h2 id="配置开机启动"><a href="#配置开机启动" class="headerlink" title="配置开机启动"></a>配置开机启动</h2><blockquote>
<p>这里可以使用&gt;/dev/null 2&gt;&amp;1<a href="https://www.cnblogs.com/ultranms/p/9353157.html" target="_blank" rel="noopener">丢弃日志</a></p>
</blockquote>
<h3 id="配置客户端-1"><a href="#配置客户端-1" class="headerlink" title="配置客户端"></a>配置客户端</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 复制文件</span><br><span class="line">cp frpc /usr/local/bin/frpc</span><br><span class="line">mkdir /etc/frp</span><br><span class="line">cp frpc.ini /etc/frp/frpc.ini</span><br><span class="line"></span><br><span class="line">方法一：</span><br><span class="line">编辑vim /etc/rc.local（然后重启 ps aux |grep frpc查看）</span><br><span class="line">nohup /usr/local/bin/frpc -c /etc/frp/frpc.ini</span><br><span class="line">&gt;/dev/null 2&gt;&amp;1 &amp;  //丢弃日志</span><br><span class="line"></span><br><span class="line">方法二：</span><br><span class="line"># 编写 frp service 文件，以 centos7 为例,armbian上貌似不好用</span><br><span class="line">vim /usr/lib/systemd/system/frpc.service</span><br><span class="line"># 内容如下</span><br><span class="line">[Unit]</span><br><span class="line">Description=frpc</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=30</span><br><span class="line">ExecStart=/usr/local/bin/frpc -c /etc/frp/frpc.ini</span><br><span class="line">ExecStop=/bin/kill $MAINPID</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"># 启动 frp 并设置开机启动</span><br><span class="line">systemctl enable frpc //开启动</span><br><span class="line">systemctl start frpc</span><br><span class="line">systemctl status frpc //显示active就是正常运行</span><br></pre></td></tr></table></figure>
<h3 id="配置服务器端（就是把frpc改成frps"><a href="#配置服务器端（就是把frpc改成frps" class="headerlink" title="配置服务器端（就是把frpc改成frps)"></a>配置服务器端（就是把frpc改成frps)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 复制文件</span><br><span class="line">cp frps /usr/local/bin/frps</span><br><span class="line">mkdir /etc/frp</span><br><span class="line">cp frps.ini /etc/frp/frps.ini</span><br><span class="line"></span><br><span class="line"># 编写 frp service 文件，以 centos7 为例</span><br><span class="line">vim /usr/lib/systemd/system/frps.service</span><br><span class="line"># 内容如下</span><br><span class="line">[Unit]</span><br><span class="line">Description=frps</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=30</span><br><span class="line">ExecStart=/usr/local/bin/frps -c /etc/frp/frps.ini</span><br><span class="line">ExecStop=/bin/kill $MAINPID</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"># 启动 frp 并设置开机启动</span><br><span class="line">systemctl enable frps</span><br><span class="line">systemctl start frps</span><br><span class="line">systemctl status frps</span><br></pre></td></tr></table></figure>
<ul>
<li><p>配置VNC</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[dana-vncstar]</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 5903</span><br><span class="line">remote_port = 5943</span><br></pre></td></tr></table></figure>
<ul>
<li><p>开启VNC：su - star -c ‘vncserver :3’</p>
<ul>
<li>设置密码</li>
</ul>
</li>
<li><p>远程使用VNC连接</p>
<ul>
<li>ip+端口号<code>x.x.x.x:5943</code></li>
<li>密码</li>
</ul>
</li>
<li><p>vncserver配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y tigervnc-server</span><br><span class="line">1.vncserver -list</span><br><span class="line">2.vncserver -kill :num</span><br><span class="line">3.vncpasswd</span><br><span class="line">4.ps -ef | grep vnc</span><br><span class="line">5.配置开机自启</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux运维</tag>
      </tags>
  </entry>
  <entry>
    <title>SecureCrt串口教程</title>
    <url>/2019/10/19/SecureCrt%E4%B8%B2%E5%8F%A3%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="硬件-amp-软件"><a href="#硬件-amp-软件" class="headerlink" title="硬件&amp;软件"></a>硬件&amp;软件</h2><ul>
<li><p>串口板芯片(找相应的驱动安装，win10可能会自动安装驱动)</p>
<ul>
<li>CH340</li>
<li>FT232：推荐</li>
<li>PL2303</li>
</ul>
</li>
<li><p>SecureCrt</p>
<ul>
<li>推荐免安装版本</li>
</ul>
</li>
</ul>
<a id="more"></a>
<p>##　使用教程</p>
<h3 id="串口板接线"><a href="#串口板接线" class="headerlink" title="串口板接线"></a>串口板接线</h3><ul>
<li>设备上贴好标签：<ul>
<li>TX：接串口板的TX</li>
<li>RX：接串口板的RX</li>
<li>GND：接串口板的GND<h3 id="查找串口端口"><a href="#查找串口端口" class="headerlink" title="查找串口端口"></a>查找串口端口</h3></li>
<li>WIN+X：快捷打开win10工具</li>
<li>选择【设备管理器】</li>
<li>找到【端口(COM和LPT)】</li>
</ul>
</li>
<li>找到【USB Serial Port(<strong>COMx</strong>)】<ul>
<li>COMx：x为数字，需要安装好驱动后才能查看，拔插一下确认串口端口</li>
</ul>
</li>
</ul>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200922191905.png" alt=""></p>
<h3 id="使用SecureCrt软件"><a href="#使用SecureCrt软件" class="headerlink" title="使用SecureCrt软件"></a>使用SecureCrt软件</h3><ul>
<li><p>左上角【文件】-【快速连接】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">协议：Serial</span><br><span class="line">端口：选择COMx                流控：取消对勾</span><br><span class="line">波特率：115200                </span><br><span class="line">数据位：8</span><br><span class="line">奇偶校验：NONE</span><br><span class="line">停止位：1</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200922191928.png" alt=""></p>
</li>
<li><p>设置完成后点击【连接】</p>
</li>
<li><p>无串口输出的话，请检查接线和设置是否正确</p>
</li>
</ul>
<ul>
<li><p>日志保存：<strong>可选</strong></p>
<ul>
<li><p>选择【选项】</p>
<ul>
<li>打开【会话选项】</li>
<li><p>左边找到【日志文件】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[日志文件名]：C:\Users\Administrator\Desktop\HQ5%Y%M%D.log //日志名称根据时间生成，并且跨天会有两个文件</span><br><span class="line">    [选项]：勾选【在连接上开始记录日志】【追加到文件】【半夜时启用新日志（必须在文件名中使用%D）】</span><br><span class="line">    [自定义日志数据]：在每行：[%Y-%M-%D-%h:%m:%s] //注意：不会在securecrt界面显示时间，日志文件中会显示</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>![](https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200922192436.png)

- 点击确定，保存设置
  - 注意：此时需要断开重连才会生成相应的日志文件
</code></pre>]]></content>
      <categories>
        <category>通用开发软件</category>
      </categories>
  </entry>
  <entry>
    <title>Centos7安装</title>
    <url>/2019/10/19/Centost7%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h1><h2 id="置顶-安装DVD版本解君愁"><a href="#置顶-安装DVD版本解君愁" class="headerlink" title="置顶(安装DVD版本解君愁)"></a>置顶(安装DVD版本解君愁)</h2><p>源ISO路径：/usr</p>
<p>挂载路径：/media/cdrom</p>
<h2 id="Minimal安装"><a href="#Minimal安装" class="headerlink" title="Minimal安装"></a>Minimal安装</h2><blockquote>
<p>minimal为最精简的系统，确实很多命令可能最简单的一些都没有，不推荐新手安装</p>
</blockquote>
<ul>
<li>UltraISO，制作启动U盘</li>
<li>插上电脑选择从U盘启动</li>
<li>出现三个选项，直接按下’e’</li>
</ul>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">inst.stage2=hd:LABEL=CentOS\x207\x20x86_64 rd.live.check</span><br><span class="line">替换成(sdb4是默认的挂载点，如果不是进入系统后使用fdisk -l查看):repo=hd:/dev/sdb4 </span><br><span class="line">其他不用动</span><br></pre></td></tr></table></figure>
<ul>
<li><p>进入一个图形界面进行系统安装，不完成所有设置是无法进行一下步的，主要注意的是</p>
<ul>
<li><p>installation source：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本次安装使用的是，这时是否有办法使用everything的本地源？</span><br><span class="line">http://mirrors.163.com/centos/7.7.1908/os/x86_64/</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><a href="https://www.linuxidc.com/Linux/2019-04/158216.htm" target="_blank" rel="noopener">分盘</a>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/分区是必须存在的分区，所有一级目录都位于该分区之下，同时还与引导/还原/修复系统等动作有关，包含了一些修复系统的程</span><br><span class="line">/ 100G </span><br><span class="line"></span><br><span class="line">多用户环境的服务器，每个用户可能经常需要在自己的家目录存放一些东西</span><br><span class="line">/home 100G</span><br><span class="line"></span><br><span class="line">测试、开发环境，需要安装比较多软件</span><br><span class="line">/usr 100G </span><br><span class="line"></span><br><span class="line">一些变化的数据，像日志，缓存</span><br><span class="line">/var 100G</span><br><span class="line"></span><br><span class="line">包含引导系统所需的静态文件，例如Linux内核文件，还有引导菜单和一些开机所需的配置文件等等，推荐大小1G。</span><br><span class="line">/boot 1G</span><br><span class="line"></span><br><span class="line">交换分区，本应该根据内存大小划分，但现在一般情况下服务器配置都较高，划分4~8G备用</span><br><span class="line">swap 8G</span><br><span class="line"></span><br><span class="line">/boot/efi 当固件为uefi时，必须存在，推荐大小200M。</span><br><span class="line">/boot/efi</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>参考：安装完成进入系统，minimal为最精简的系统，缺失一些常用命令，可以使用网络源先下载一些常用命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">完成后可以安装</span><br><span class="line">yum install ntfs-3g  //然而我依旧挂不上ntfs盘</span><br></pre></td></tr></table></figure>
<h2 id="挂载Everything镜像作本地源"><a href="#挂载Everything镜像作本地源" class="headerlink" title="挂载Everything镜像作本地源"></a>挂载Everything镜像作本地源</h2><ul>
<li>将IOS镜像传输到minimal系统上</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.tftp:我没搞好</span><br><span class="line">2.U盘传输：挂载失败</span><br><span class="line">3.nfs:</span><br><span class="line">mount -t nfs ip:/FilePath /mnt</span><br><span class="line">mkdir /media/cdrom </span><br><span class="line">mount -o  loop /usr/CentOS-7-x86_64-Everything-1908.iso  /media/cdrom</span><br><span class="line">df -HT			#查看镜像是否挂载成功</span><br><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">mkdir ./bak			</span><br><span class="line">mv    ./*.repo   ./bak/</span><br><span class="line">cp ./bak/CentOS-Media.repo  .</span><br><span class="line">vim  CentOS-Media.repo 		#修改配置文件，内容如下图</span><br><span class="line">-----------------------</span><br><span class="line">[CentOS7]</span><br><span class="line">name=CentOS7 Everything ISO</span><br><span class="line">baseurl=file:///mnt/CentOS7</span><br><span class="line">enable=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">-------------------</span><br><span class="line">yum clean all </span><br><span class="line">yum repolist</span><br><span class="line">安装完成</span><br></pre></td></tr></table></figure>
<ul>
<li>yum软件管理命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">列出资源库中所有可以安装或更新的rpm包</span><br><span class="line"># yum list</span><br><span class="line">列出资源库中特定的可以安装或更新以及已经安装的rpm包</span><br><span class="line"># yum list perl //列出名为perl 的包</span><br><span class="line"># yum list perl* //列出perl 开头的包</span><br><span class="line">列出资源库中所有可以更新的rpm包</span><br><span class="line"># yum list updates</span><br><span class="line">列出已经安装的所有的rpm包</span><br><span class="line"># yum list installed</span><br><span class="line">列出已经安装的但是不包含在资源库中的rpm包</span><br><span class="line"># yum list extras</span><br><span class="line">列出资源库中所有可以安装或更新的rpm包的信息</span><br><span class="line"># yum info</span><br><span class="line">列出资源库中特定的可以安装或更新以及已经安装的rpm包的信息</span><br><span class="line"># yum info perl //列出perl 包信息</span><br><span class="line"># yum info perl* //列出perl 开头的所有包的信息</span><br><span class="line">列出资源库中所有可以更新的rpm包的信息</span><br><span class="line"># yum info updates</span><br><span class="line">列出已经安装的所有的rpm包的信息</span><br><span class="line"># yum info installed</span><br><span class="line">列出已经安装的但是不包含在资源库中的rpm包的信息</span><br><span class="line"># yum info extras</span><br><span class="line">搜索匹配特定字符的rpm包</span><br><span class="line"># yum search perl //在包名称、包描述等中搜索</span><br><span class="line">搜索有包含特定文件名的rpm包</span><br><span class="line"># yum provides realplay</span><br><span class="line">安装rpm包</span><br><span class="line"># yum install perl //安装perl 包</span><br><span class="line"># yum install perl* //安装perl 开头的包</span><br><span class="line">删除rpm包,包括与该包有倚赖性的包</span><br><span class="line"># yum remove perl* //会删除perl-* 所有包</span><br><span class="line">软件组管理</span><br><span class="line"># yum groupinstall “Chinese Support” //安装指定的组</span><br><span class="line"># yum groupupdate “Chinese Support” //安装了的组成员软件包更新</span><br><span class="line"># yum grouplist “Chinese Support” //安装了的组和可以安装的组一览显示</span><br><span class="line"># yum groupremove “Chinese Support” //删除指定的组</span><br><span class="line"># yum groupinfo “Chinese Support” //指定组所包含的软件包显示</span><br><span class="line">检查可更新的rpm包</span><br><span class="line"># yum check-update</span><br><span class="line">更新所有的rpm包</span><br><span class="line"># yum update</span><br><span class="line">更新指定的rpm包,如更新kernel和kernel source</span><br><span class="line"># yum update kernel kernel-source</span><br><span class="line">大规模的版本升级,与yum update不同的是,连旧的淘汰的包也升级</span><br><span class="line"># yum upgrade</span><br><span class="line">清除暂存中rpm包文件</span><br><span class="line"># yum clean packages</span><br><span class="line">清除暂存中rpm头文件</span><br><span class="line"># yum clearn headers</span><br><span class="line">清除暂存中旧的rpm头文件</span><br><span class="line"># yum clean oldheaders</span><br><span class="line">清除暂存中旧的rpm头文件和包文件</span><br><span class="line"># yum clearn all</span><br></pre></td></tr></table></figure>
<h1 id="使用网络源头"><a href="#使用网络源头" class="headerlink" title="使用网络源头"></a>使用网络源头</h1><ul>
<li>备份：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>
<ul>
<li>下载</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">阿里源：wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line">163：wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class="line"></span><br><span class="line">命令解释：-O 原文件 下载的文件</span><br></pre></td></tr></table></figure>
<ul>
<li>生效</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br><span class="line">yum makecache //生成本地备份，方便搜索</span><br></pre></td></tr></table></figure>
<h1 id="系统配置"><a href="#系统配置" class="headerlink" title="系统配置"></a>系统配置</h1><h2 id="centos配置普通用户root"><a href="#centos配置普通用户root" class="headerlink" title="centos配置普通用户root"></a><a href="https://blog.csdn.net/p_function/article/details/79443196" target="_blank" rel="noopener">centos配置普通用户root</a></h2><ul>
<li>修改/etc/sudoers，添加一行<code>star ALL=(ALL) ALL</code></li>
<li>其他方法都是让当前用户可以切换到root，不推荐</li>
</ul>
<h1 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h1><h2 id="SpeedTest"><a href="#SpeedTest" class="headerlink" title="SpeedTest"></a>SpeedTest</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#1、安装python-pip</span><br><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install python-pip</span><br><span class="line">#升级pip</span><br><span class="line">pip install --upgrade pip</span><br><span class="line">pip install speedtest-cli</span><br><span class="line"></span><br><span class="line">运行speedtest即可</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Centos7</tag>
      </tags>
  </entry>
  <entry>
    <title>Pine64系统与配置</title>
    <url>/2019/10/19/Arm%E6%9D%BF%E5%88%B7%E6%9C%BA%E4%BB%A5%E5%8F%8A%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="系统烧录"><a href="#系统烧录" class="headerlink" title="系统烧录"></a>系统烧录</h1><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><h2 id="uboot"><a href="#uboot" class="headerlink" title="uboot"></a>uboot</h2><h2 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h2><h2 id="rootfs"><a href="#rootfs" class="headerlink" title="rootfs"></a>rootfs</h2><h1 id="常用软件与环境"><a href="#常用软件与环境" class="headerlink" title="常用软件与环境"></a>常用软件与环境</h1><h2 id="更换国内源-Armbian"><a href="#更换国内源-Armbian" class="headerlink" title="更换国内源(Armbian)"></a>更换国内源(Armbian)</h2><ul>
<li>查看系统版本</li>
<li>更换源</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian stretch main contrib non-free</span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian stretch-updates main contrib non-free</span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian stretch-backports main contrib non-free</span><br><span class="line">deb http://mirrors.ustc.edu.cn/debian-security/ stretch/updates main contrib non-free</span><br><span class="line">20200424更新，上面不能用就换</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu-ports/ xenial main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu-ports/ xenial main</span><br><span class="line"> </span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu-ports/ xenial-updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu-ports/ xenial-updates main</span><br><span class="line"> </span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu-ports/ xenial universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu-ports/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu-ports/ xenial-updates universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu-ports/ xenial-updates universe</span><br><span class="line"> </span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu-ports/ xenial-security main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu-ports/ xenial-security main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu-ports/ xenial-security universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu-ports/ xenial-security universe</span><br></pre></td></tr></table></figure>
<h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><ul>
<li>有线配置</li>
<li>无线配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nmtui：图形化界面</span><br></pre></td></tr></table></figure>
<h2 id="hexo、node-js官网-博客环境"><a href="#hexo、node-js官网-博客环境" class="headerlink" title="hexo、node.js官网 博客环境"></a>hexo、<a href="https://www.jianshu.com/p/726a5f34e541" target="_blank" rel="noopener">node.js官网</a> 博客环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.wget命令官网下载对应版本，查一下芯片架构uname -a，有的可能不显示</span><br><span class="line">2.解压xz -d、tar -xavf </span><br><span class="line">3.将整个包移动到/usr/local/node</span><br><span class="line">4.因为是手动安装的，我们运行命令的时候是从/usr/bin/目录找的，因此需要将执行文件的地址链接到/usr/bin目录后就可以全局执行==这里需要分别链接npm、node、hexo==</span><br><span class="line">ln -s /usr/local/node/bin/node /usr/bin/node</span><br><span class="line">ln -s /usr/local/node/bin/npm /usr/bin/npm</span><br><span class="line">ln -s /usr/local/node/lib/node_modules/hexo-cli/bin/hexo /usr/bin/hexo</span><br></pre></td></tr></table></figure>
<h2 id="装不了的软件"><a href="#装不了的软件" class="headerlink" title="装不了的软件"></a>装不了的软件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">typora，==装不了==</span><br><span class="line">chrome or firefox==图形界面太卡==</span><br></pre></td></tr></table></figure>
<h2 id="安装桌面-用得少，卡"><a href="#安装桌面-用得少，卡" class="headerlink" title="安装桌面(用得少，卡)"></a>安装桌面(用得少，卡)</h2><ul>
<li>使用Armbian-config—&gt;system—&gt;Desktop，可能进入Armbian-config需要一段时间</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Pine64</tag>
      </tags>
  </entry>
  <entry>
    <title>常见开发硬件协议</title>
    <url>/2018/10/26/%E7%A1%AC%E4%BB%B6%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="串口协议"><a href="#串口协议" class="headerlink" title="串口协议"></a>串口协议</h1><ul>
<li>波特率</li>
<li>数据位</li>
<li>停止位</li>
<li>奇偶校验<br>RXD TXD GND <a id="more"></a>
<h1 id="SPI"><a href="#SPI" class="headerlink" title="SPI"></a>SPI</h1>四线协议:时钟、从机选择使能、<br><img src="https://www.arduino.cn/data/attachment/forum/201808/13/130601dgb2mzgu6wlsb0km.png" alt="SPI"></li>
<li>有多个从机，但只能存在一个主机，通过使能线选择</li>
</ul>
<h1 id="i2c"><a href="#i2c" class="headerlink" title="i2c"></a>i2c</h1><p><img src="https://www.arduino.cn/data/attachment/forum/201808/21/183346tyke40lelkmgqgkg.jpg" alt="i2c"><br>两线：数据线、时钟线</p>
<p>区别:SPI通过片选信号线SS来决定要通讯的从机，I2C通过给每个I2C器件分配唯一的地址</p>
<h1 id="esp8266-TCP通讯"><a href="#esp8266-TCP通讯" class="headerlink" title="esp8266 TCP通讯"></a>esp8266 TCP通讯</h1><p><a href="https://blog.csdn.net/qq_28877125/article/details/62898895" target="_blank" rel="noopener">https://blog.csdn.net/qq_28877125/article/details/62898895</a></p>
]]></content>
      <categories>
        <category>Stm32</category>
      </categories>
      <tags>
        <tag>硬件协议</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP与UDP</title>
    <url>/2018/10/24/TCP%E4%B8%8EUDP/</url>
    <content><![CDATA[<blockquote>
<p>发现用历史推演的角度去看问题会更有逻辑</p>
</blockquote>
<ol>
<li>TCP与UDP的区别</li>
<li>TCP的握手和挥手</li>
<li>UDP的建立连接</li>
<li>sock的bind使用</li>
<li>7层协议和四层协议</li>
</ol>
<a id="more"></a>
<h3 id="7层协议和四层协议"><a href="#7层协议和四层协议" class="headerlink" title="7层协议和四层协议"></a>7层协议和四层协议</h3><p>OSI模型<br>应用层 应用<br>表示层 解决不同系统间的通讯语法问题<br>会话层 管理程序间的通信<br>传输层 TCP/UDP<br>网络层 路由器<br>数据链路 交换机(mac)<br>物理层   网线</p>
<p>TCP/IP四层协议<br>应用层<br>传输层<br>网络层<br>数据层</p>
<h3 id="TCP与UDP区别"><a href="#TCP与UDP区别" class="headerlink" title="TCP与UDP区别"></a>TCP与UDP区别</h3><ol>
<li>TCP面向连接，因此传输较慢、占用系统资源多。UDP无连接，TCP的大部分缺点转换成了其优点</li>
<li>TCP提供可靠的服务，传输可靠的数据。UDP尽力交付，传输大量的数据</li>
<li>TCP面向字节流，UDP面向报文</li>
<li>TCP只能一对一，UDP可以多种形式<br>TCP常见服务：邮件、POP、HTTP、FTP、SSH</li>
</ol>
<h3 id="TCP的握手和挥手"><a href="#TCP的握手和挥手" class="headerlink" title="TCP的握手和挥手"></a>TCP的握手和挥手</h3><p>为什么是3次握手 四次挥手：结束的时候不会一下就断开，要给他完成任务的时间<br>三次握手<br>CLIENT          SERVER</p>
<ol>
<li>SYN=1,seq(随机产生的)=x—–&gt;</li>
<li>&lt;—- SYN=1,ACK=1,ack=x+1,seq=y</li>
<li>ACK=1,ack=y+1,seq=x+1         这里client检测传来的ack ACK后发送数据 传过去后server也会检测。<br>SEQ的作用：序列号 防止传错，便于接收方能按顺序接受数据</li>
</ol>
<p>四次挥手</p>
<ol>
<li>FIN=1 seq=u     </li>
<li>ACK=1,ack=u+1 seq=v</li>
<li>FIN=1,ACK=1,ack=u+1,seq=w</li>
<li>ACK=1,seq=u+1,ack=w+1</li>
</ol>
<h3 id="sock完成TCP-UDP"><a href="#sock完成TCP-UDP" class="headerlink" title="sock完成TCP/UDP"></a>sock完成TCP/UDP</h3><p>TCP</p>
<ol>
<li>创建套接字 字节流</li>
<li>绑定IP和端口 bind()</li>
<li>监听 listen</li>
<li>接收accept 发送send</li>
</ol>
<p>UDP</p>
<ol>
<li>创建套接字 数据报</li>
<li>绑定IP和端口 bind()</li>
<li>接收recvfrom 发送sendto</li>
</ol>
<p>面向数据报：发送端调用一次sendto, 发送100个字节, 那么接收端也必须调用对应的一次recvfrom, 接收100个字节，而不能循环调用10次recvfrom, 每次接收10个字节;</p>
<p>面向字节流：上述两种都可以</p>
<p>十八、请简述设计一个tcp并发服务器的基本流程，并且将关键函数写出 ）（5分）<br>socket()：创建一个socket文件描述符<br>bind(): 绑定服务器的ip地址和端口号(以太网地址结构)<br>Listen(): 监听客户端<br>select(): 轮训所有监听的文件描述符<br>acept(): 等待客户端的连接</p>
]]></content>
      <categories>
        <category>Network</category>
      </categories>
      <tags>
        <tag>网络协议</tag>
      </tags>
  </entry>
  <entry>
    <title>Wegetures使用指南</title>
    <url>/2018/10/19/Wegetures/</url>
    <content><![CDATA[<h1 id="Wegetures"><a href="#Wegetures" class="headerlink" title="Wegetures"></a>Wegetures</h1><blockquote>
<p>个人使用原则</p>
<p>1.组合最多包含两个方向：方向有上下左右</p>
<p>2.斜向方向</p>
<p>组合选项</p>
<p>1.中键+上下左右，斜向方向:8ball:</p>
<p>2.右键+上下左右，斜向方向:eight:</p>
<p>3.右键：中键和左键</p>
<p>4.中键：右键和左键</p>
</blockquote>
<a id="more"></a>
<ul>
<li><p>中键</p>
<ul>
<li>撤回 左</li>
<li>还原 右</li>
<li>删除 </li>
<li>回车 上</li>
<li>esc 下</li>
<li>上一级目录</li>
<li>返回上一个目录</li>
</ul>
</li>
<li><p>右键</p>
<ul>
<li>放大  右上</li>
<li>缩小 左下</li>
<li>ditto：左上</li>
<li>截图：右下</li>
<li>退出alt+F4 下左</li>
<li>关闭ctrl+w 下右</li>
<li>WIN+R 右</li>
<li>WIN+L 左<ul>
<li>文本<ul>
<li>复制：上</li>
<li>粘贴：下</li>
<li>保存：左键</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows环境</title>
    <url>/2018/10/19/Windows%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="免安装软件"><a href="#免安装软件" class="headerlink" title="免安装软件"></a>免安装软件</h1><blockquote>
<p>原则：</p>
<p>1.便携，免安装的配置均保存下来了，越用易用性越高</p>
<p>2.不影响正常使用，有的软件不安装需要更改注册表等操作较耗时</p>
</blockquote>
<ul>
<li>securecrt：配置累积，所以注意命名方便积累</li>
<li>xshell：配置累积，注意命名方便积累</li>
<li>截图：Snipaste</li>
<li>vscode：可以安装也可以不安装，需要评估一下</li>
<li>DiskGenius</li>
<li>everthing</li>
<li>pandownload</li>
</ul>
<a id="more"></a>
<h1 id="办公必备软件"><a href="#办公必备软件" class="headerlink" title="办公必备软件"></a>办公必备软件</h1><ol>
<li>剪辑板：ditto</li>
<li>工具箱：Quicker、rolan</li>
<li>搜索：Listary(搜索应用、文件夹)、想详细的查看文件夹位置用everthing</li>
<li>鼠标快捷：WGestures</li>
<li>文本编辑：notepad++</li>
<li>密码：keepass</li>
<li>视频播放：potplayer、暴风、弹弹play</li>
<li>pdf阅读：adobe reader 那个版本？</li>
<li>远程：anydesk和teamview</li>
<li>看图：爱奇艺看图</li>
<li>系统监控：aida64、netspeedmonitor</li>
<li>思维导图：mindmanager</li>
<li>图片上传：pigo</li>
<li>软件卸载：iobit</li>
<li>硬盘：SD Card formatter、diskgenius</li>
<li>笔记：typora</li>
<li>下载：idman、百度网盘</li>
<li>git录制：apowersoftgif</li>
<li>网盘搜索：pandownload</li>
<li>解压缩：bandizip</li>
<li>系统和office激活：aact(原理是kms待研究)</li>
</ol>
<h1 id="开发软件"><a href="#开发软件" class="headerlink" title="开发软件"></a>开发软件</h1><ul>
<li>git</li>
<li>adb环境：注意版本太旧了有的系统用不了</li>
<li>python：pychar</li>
<li>抓包：fiddler、charles、ominipeek、wireshark</li>
<li>hexo环境：node.js</li>
<li>远程服务器：xshell</li>
<li>串口：securecrt</li>
<li>vscode</li>
<li>刷机：xiaomiflash</li>
<li>墙：qv2ray</li>
<li>硬盘写入：ultraios</li>
</ul>
<h1 id="其他软件分类"><a href="#其他软件分类" class="headerlink" title="其他软件分类"></a>其他软件分类</h1><blockquote>
<p>存储原则</p>
<p>1.破解软件与原软件保存在一起</p>
</blockquote>
<h2 id="文本转换"><a href="#文本转换" class="headerlink" title="文本转换"></a>文本转换</h2><h2 id="视频图片相关-剪辑、转换、存储"><a href="#视频图片相关-剪辑、转换、存储" class="headerlink" title="视频图片相关(剪辑、转换、存储)"></a>视频图片相关(剪辑、转换、存储)</h2><h1 id="系统操作"><a href="#系统操作" class="headerlink" title="系统操作"></a>系统操作</h1><h2 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h2><h3 id="DiskGenius硬盘无法转换GPT到MBR分区表处理办法"><a href="#DiskGenius硬盘无法转换GPT到MBR分区表处理办法" class="headerlink" title="DiskGenius硬盘无法转换GPT到MBR分区表处理办法"></a>DiskGenius硬盘无法转换GPT到MBR分区表处理办法</h3><ul>
<li><p>环境：win10</p>
</li>
<li><p>win+r运行cmd</p>
<ul>
<li><p><code>diskpart</code></p>
</li>
<li><p><code>list disk</code></p>
</li>
<li><code>select disk 0</code></li>
<li><code>clean</code></li>
<li><code>conver MBR</code></li>
<li>最后可以使用DiskGenius进行操作</li>
</ul>
</li>
</ul>
<h3 id="设备双叉双绞线直连"><a href="#设备双叉双绞线直连" class="headerlink" title="设备双叉双绞线直连"></a>设备双叉双绞线直连</h3><p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200612143933.png" style="zoom:50%;"></p>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200612144006.png" style="zoom:50%;"></p>
<ul>
<li>配置好后用ssh可以直接连接设备</li>
</ul>
]]></content>
      <categories>
        <category>Windows</category>
      </categories>
      <tags>
        <tag>Windows软件</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言static</title>
    <url>/2018/10/19/Shell%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h1 id="Shell脚本"><a href="#Shell脚本" class="headerlink" title="Shell脚本"></a><a href="http://www.cppcns.com/os/linux/202811.html" target="_blank" rel="noopener">Shell脚本</a></h1><blockquote>
<p>本质：调用命令—&gt;处理命令的结果—&gt;进行其他操作</p>
<p>注意：一些复杂的操作，有的shell不一定支持(例如openwrt)</p>
</blockquote>
<p>[TOC]</p>
<h1 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h1><ul>
<li>sh xx.sh</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">不能重stdin读取数据</span><br></pre></td></tr></table></figure>
<ul>
<li>增加执行权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 777 xx.sh</span><br><span class="line">chmod 555 xx.sh //可读可执行</span><br></pre></td></tr></table></figure>
<h1 id="条件判断与循环"><a href="#条件判断与循环" class="headerlink" title="条件判断与循环"></a>条件判断与循环</h1><blockquote>
<p>1.括号的使用</p>
<p>2.对比的方法</p>
<p>3.引号的使用方法</p>
<p>4.特点：判断的变量不需要赋值，会自动累加向后访问(这里区别也方便于c语言，当然其也支持c语言的方法，但是不推荐使用，因为这样更加方便啊兄嘚)</p>
</blockquote>
<h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><blockquote>
<p><strong>注意空格</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [];then//推荐这样写，一定注意空格！！！！中间有空格</span><br><span class="line">elif //可选</span><br><span class="line">else //可选</span><br><span class="line">fi</span><br><span class="line">举个例子：</span><br></pre></td></tr></table></figure>
<h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><h3 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for arg in [list] //[]不是必须</span><br><span class="line">do</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h3 id="控制次数："><a href="#控制次数：" class="headerlink" title="控制次数："></a>控制次数：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!/bin/bash  </span><br><span class="line">  </span><br><span class="line">for i in $(seq 1 10)  </span><br><span class="line">do   </span><br><span class="line">echo $(expr $i \* 3 + 1);  </span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>### </p>
<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while [confition] //[]不是必须</span><br><span class="line">do</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case variable in</span><br><span class="line">xx | xx) comman;; //这是一种方式，也就是一个命令对应多个输入值,后面一定是两个;</span><br><span class="line">xx) comman;;</span><br><span class="line">*) default//默认输出</span><br><span class="line">esac</span><br></pre></td></tr></table></figure>
<h1 id="脚本的符号"><a href="#脚本的符号" class="headerlink" title="脚本的符号"></a>脚本的符号</h1><h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><ul>
<li>单引号：所见即所得</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$等特殊符号在单引号中均无效，</span><br><span class="line">例子：</span><br><span class="line">x=10</span><br><span class="line">echo &apos;$x&apos;</span><br><span class="line">输出：$x</span><br><span class="line"></span><br><span class="line">注意：单引号中不能有单引号。</span><br></pre></td></tr></table></figure>
<ul>
<li>双引号：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$等符号可以正常使用</span><br><span class="line">编写脚本时变量推荐使用&quot;$xx&quot; 这种形式可以防止出现$xxxx 无效的情况</span><br></pre></td></tr></table></figure>
<h2 id="小括号"><a href="#小括号" class="headerlink" title="小括号"></a>小括号</h2><h3 id="单小括号：基本只用在命令输入"><a href="#单小括号：基本只用在命令输入" class="headerlink" title="单小括号：基本只用在命令输入"></a>单小括号：基本只用在命令输入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$(date) //命令与括号不需要空格</span><br></pre></td></tr></table></figure>
<h3 id="双小括号：括号中的运算符、表达式转换为c语言运算规则"><a href="#双小括号：括号中的运算符、表达式转换为c语言运算规则" class="headerlink" title="双小括号：括号中的运算符、表达式转换为c语言运算规则"></a>双小括号：括号中的运算符、表达式转换为c语言运算规则</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">主要作用：</span><br><span class="line">1.变量使用可以省去$前缀(openwrt不能用)，</span><br><span class="line">2.((&quot;$a&quot; &lt; &quot;$b&quot;)) //整数比较，没必要使用，[ &quot;$a&quot; -lt &quot;$b&quot; ]即可还能清楚的知晓a和b是整数</span><br><span class="line">3.跨进制运算——二进制、八进制、十六进制运算时，输出结果全都自动转化成了十进制。如：echo 4.$((16#5f)) 结果为95 (16进位转十进制)</span><br><span class="line">C语言规则运算——$((exp))，exp为符合C语言规则的运算符，表达式例如$((i++))</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200908194914.png" alt=""></p>
<h2 id="中括号"><a href="#中括号" class="headerlink" title="中括号"></a>中括号</h2><h3 id="单中括号-数值、字符串、文件比较"><a href="#单中括号-数值、字符串、文件比较" class="headerlink" title="单中括号(数值、字符串、文件比较)"></a>单中括号(数值、字符串、文件比较)</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.注意：括号前后要空格[ xx ]，养成好的习惯，不然命令执行会出现问题</span><br><span class="line">2.相当于test命令见[linux命令行与shell脚本编程大全 12.4章节]</span><br><span class="line">3.数组索引</span><br><span class="line"></span><br><span class="line">单中口号的专业叫法 条件测试</span><br><span class="line">双中括号的专业叫法 支持正则表达式的条件测试</span><br></pre></td></tr></table></figure>
<h4 id="数值比较"><a href="#数值比较" class="headerlink" title="数值比较"></a>数值比较</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：</span><br><span class="line">1.shell不支持小数点计算与比较</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200908195417.png" alt=""></p>
<h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：</span><br><span class="line">1.&lt;与&gt;在[ ]中需要使用\转椅 例子[ &quot;$a&quot; \&lt; &quot;$b&quot; ]这样使用才正确</span><br><span class="line">2.-n -z 使用方法[ -n &quot;$file&quot; ]</span><br><span class="line">3.字符串排序是按照ASCII字符排序，某一个大就是大了？用的时候看看</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200923154315.png" alt=""></p>
<h4 id="文件比较（属性、权限"><a href="#文件比较（属性、权限" class="headerlink" title="文件比较（属性、权限)"></a>文件比较（属性、权限)</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.使用方法 [ -d $file ]</span><br></pre></td></tr></table></figure>
<p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200923154335.png" alt=""></p>
<h3 id="双中括号-扩展单中括号"><a href="#双中括号-扩展单中括号" class="headerlink" title="双中括号(扩展单中括号)"></a>双中括号(扩展单中括号)</h3><blockquote>
<p>不是所有shell都支持双中括号</p>
<p>双中括号的专业叫法 支持正则表达式的条件测试</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">特性：模式匹配(不止正则表达式)</span><br><span class="line">1.支持正则表达式，</span><br><span class="line">使用=~启动正则匹配(左侧的参数是否满足右边的要求)</span><br><span class="line">2.括号内支持逻辑运算符号(主要区别于[]),例子：[[ $a != 1 &amp;&amp; $a != 2 ]]，而使用单括号if [ $a -ne 1] &amp;&amp; [ $a != 2 ]</span><br></pre></td></tr></table></figure>
<h2 id="大括号"><a href="#大括号" class="headerlink" title="大括号"></a>大括号</h2><blockquote>
<p>{}</p>
</blockquote>
<h3 id="特殊替换"><a href="#特殊替换" class="headerlink" title="特殊替换"></a>特殊替换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$&#123;var:-string&#125;和$&#123;var:=string&#125;：若变量var为空，则用在命令行中用string来替换$&#123;var:-string&#125;，否则变量var不为空时，则用变量var的值来替换$&#123;var:-string&#125;；不同之处是$&#123;var:=string&#125;常用于判断var是否赋值，没有的话则给var赋上一个默认值。</span><br><span class="line"></span><br><span class="line">$&#123;var:+string&#125;：替换规则和上面的相反，即只有当var不是空的时候才替换成string，若var为空时则不替换或者说是替换成变量 var的值，即空值。(因为变量var此时为空，所以这两种说法是等价的) </span><br><span class="line"></span><br><span class="line">$&#123;var:?string&#125;：替换规则为：若变量var不为空，则用变量var的值来替换$&#123;var:?string&#125;；若变量var为空，则把string输出到标准错误中，并从脚本中退出。我们可利用此特性来检查是否设置了变量的值。</span><br></pre></td></tr></table></figure>
<h3 id="模式匹配—–感觉就用正则表达式就行了，但是可能有些场景简单点，链接中有详解"><a href="#模式匹配—–感觉就用正则表达式就行了，但是可能有些场景简单点，链接中有详解" class="headerlink" title="模式匹配—–感觉就用正则表达式就行了，但是可能有些场景简单点，链接中有详解"></a><a href="https://www.dwhd.org/20150708_211624.html" target="_blank" rel="noopener">模式匹配</a>—–感觉就用正则表达式就行了，但是可能有些场景简单点，链接中有详解</h3><p>第一种模式：${variable%pattern}。shell在variable中查找，看它是否一给的模式pattern结尾，如果是，把variable去掉右边最短的匹配模式</p>
<p>第二种模式： ${variable%%pattern}，这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，把variable中去掉右边最长的匹配模式</p>
<p>第三种模式：${variable#pattern} 这种模式时，shell在variable中查找，看它是否一给的模式pattern开始，如果是，把variable中去掉左边最短的匹配模式</p>
<p>第四种模式： ${variable##pattern} 这种模式时，shell在variable中查找，看它是否一给的模式pattern结尾，如果是，把variable中去掉左边最长的匹配模式</p>
<h3 id="类似数组赋值"><a href="#类似数组赋值" class="headerlink" title="类似数组赋值"></a>类似数组赋值</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;a,b,c,d&#125;_file</span><br><span class="line">&#123;1..5&#125;_file</span><br></pre></td></tr></table></figure>
<h3 id="字符串提取和替换"><a href="#字符串提取和替换" class="headerlink" title="字符串提取和替换"></a>字符串提取和替换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一种模式：$&#123;var:num&#125;，shell在var中提取第num个字符到末尾的所有字符。若num为正数，从左边0处开始；若num为负数，从右边开始提取字串，但必须使用在冒号后面加空格或一个数字或整个num加上括号，如$&#123;var: -2&#125;、$&#123;var:1-3&#125;或$&#123;var:(-2)&#125;。         </span><br><span class="line"></span><br><span class="line">第二种模式：$&#123;var:num1:num2&#125;，num1是位置，num2是长度。表示从$var字符串的第$num1个位置开始提取长度为$num2的子串。不能为负数。</span><br><span class="line"></span><br><span class="line">第三种模式：$&#123;var/pattern/pattern&#125;表示将var字符串的第一个匹配的pattern替换为另一个pattern。</span><br><span class="line"></span><br><span class="line">第四种模式：$&#123;var//pattern/pattern&#125;表示将var字符串中的所有能匹配的pattern替换为另一个pattern。</span><br></pre></td></tr></table></figure>
<h2 id="布尔运算与或"><a href="#布尔运算与或" class="headerlink" title="布尔运算与或"></a>布尔运算与或</h2><ul>
<li>与</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ -d $file ] &amp;&amp; [ -w $file ]</span><br></pre></td></tr></table></figure>
<ul>
<li>或</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ -d $file ] || [ -w $file ]</span><br></pre></td></tr></table></figure>
<h2 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h2><ul>
<li>反引号</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">`comm` 里面可以直接执行命令，可以带参数</span><br></pre></td></tr></table></figure>
<ul>
<li>$</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$()//执行命令</span><br><span class="line">$//引用变量</span><br></pre></td></tr></table></figure>
<h1 id="其他常用"><a href="#其他常用" class="headerlink" title="其他常用"></a>其他常用</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo -e &quot;\n&quot; //-e使得\n生效，单引号也可以啊，为什么有的说不行</span><br></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function name&#123;</span><br><span class="line">	commands</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">然后就是return、传参(传数组)、</span><br></pre></td></tr></table></figure>
<h1 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$# 获取参数总和</span><br><span class="line">$*</span><br><span class="line">$@</span><br><span class="line">$?</span><br></pre></td></tr></table></figure>
<h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200923154353.png" alt=""></p>
<h1 id="sed-编辑匹配的文本"><a href="#sed-编辑匹配的文本" class="headerlink" title="sed(编辑匹配的文本)"></a>sed(编辑匹配的文本)</h1><blockquote>
<p>总结：</p>
<p>1.操作是以行为单位，分隔符就是\n，牢记//不能少</p>
<p>2.一般常用：</p>
<p>在文本最后面插入一行文本：sed -i ‘$a\dddd’ file //-i 是直接修改文件</p>
<p>替换某一行中的内容：sed ‘/xx/s/xxx/xxx’ file   //xx都支持正则匹配</p>
<p>替换末行： sed ‘/xx/c\Test Line 1’ //xx支持正则匹配，替换的行内容为反斜杠开头</p>
</blockquote>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-i 直接修改文件</span><br></pre></td></tr></table></figure>
<h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &apos;s/test/replace/&apos; file</span><br><span class="line">s代表替换，replace是替换‘的内容</span><br><span class="line">sed &apos;s/test/replace/;s/test2/replace2/&apos; file</span><br><span class="line">引用变量：不打&apos;&apos;？</span><br><span class="line">如果有大量的数据需要处理，可以使用一个文件存储需</span><br><span class="line">script.sed //以sed结尾是方便识别，放入以下内容</span><br><span class="line">s/brown/green/</span><br><span class="line">s/fox/elephant/</span><br><span class="line">s/dog/cat/</span><br><span class="line">运行：sed -f script.sed file</span><br></pre></td></tr></table></figure>
<h2 id="高级替换"><a href="#高级替换" class="headerlink" title="高级替换"></a>高级替换</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数字，指定第几个匹配被替换 sed &apos;s/test/trial/2&apos; file </span><br><span class="line">全局替换g：sed &apos;s/test/trial/g&apos; file</span><br><span class="line">替换后的内容输出到文件 w file：sed &apos;s/test/trial/w test.txt&apos; file</span><br><span class="line">替换特殊字符：例如/，这里就可以使用!作为分隔符，**还是用反斜杠吧**</span><br><span class="line">sed &apos;s!/bin/bash!/bin/csh!&apos; /etc/passwd</span><br><span class="line"></span><br><span class="line">特别命令：y</span><br><span class="line">sed &apos;y/123/789/&apos; data8.txt //文本中的123会被替换成789</span><br><span class="line">就是遇1变7。。。</span><br></pre></td></tr></table></figure>
<h2 id="指定区间"><a href="#指定区间" class="headerlink" title="指定区间"></a>指定区间</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">由于sed默认是读取所有行，因此如果只匹配某一行需要特殊处理</span><br><span class="line">1.数字，只替换某一行：</span><br><span class="line">sed &apos;2s/dog/cat/&apos; data1.txt</span><br><span class="line">sed &apos;2,3s/dog/cat/&apos; data1.txt //从第2到第3？应该是</span><br><span class="line">sed &apos;2,$s/dog/cat/&apos; data1.txt //从第2行到最后</span><br><span class="line">2.文本，只替换包含某个关键词的行</span><br><span class="line">sed &apos;/Samantha/s/bash/csh/&apos; /etc/passwd</span><br><span class="line">3.大括号</span><br><span class="line">sed &apos;2&#123;s/dog/cat/;s/test/test2&#125;&apos; data1.txt</span><br></pre></td></tr></table></figure>
<h2 id="删除行"><a href="#删除行" class="headerlink" title="删除行"></a>删除行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数字：sed &apos;3,$d&apos; data6.txt //区间删除3,$可以是3，也可以是2,3</span><br><span class="line">文本：sed &apos;/number 1/d&apos; data6.txt // 双斜杠中间是匹配的文本</span><br></pre></td></tr></table></figure>
<h2 id="插入行"><a href="#插入行" class="headerlink" title="插入行"></a>插入行</h2><ul>
<li>向前插入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;Test Line 2&quot; | sed &apos;i\Test Line 1&apos; //注意是反斜杠</span><br><span class="line">指定行插入：echo &quot;Test Line 2&quot; | sed &apos;numi\Test Line 1&apos; //i前输入一个数字。插入指定位置$是末尾</span><br><span class="line">文本匹配插入：echo &quot;Test Line 2&quot; | sed &apos;/string/i\Test Line 1&apos; //遇到/用反斜杠吧，方便</span><br></pre></td></tr></table></figure>
<ul>
<li>向后插入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo &quot;Test Line 2&quot; | sed &apos;a\Test Line 1&apos;</span><br></pre></td></tr></table></figure>
<ul>
<li>另外一种输入格式</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &apos;1i\</span><br><span class="line">&gt; This is one line of new text.\</span><br><span class="line">&gt; This is another line of new text.&apos; data6.txt</span><br><span class="line"></span><br><span class="line">直到最后的&apos;出现才结束</span><br></pre></td></tr></table></figure>
<h2 id="修改行"><a href="#修改行" class="headerlink" title="修改行"></a>修改行</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">和插入差不多，就是变成了修改行</span><br><span class="line">echo &quot;Test Line 2&quot; | sed &apos;c\Test Line 1&apos;</span><br><span class="line">数字：略</span><br><span class="line">文本匹配：略</span><br></pre></td></tr></table></figure>
<h2 id="使用正则"><a href="#使用正则" class="headerlink" title="使用正则"></a>使用正则</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sed &apos;/number 1/d&apos; data6.txt //斜杠中间即可使用正则</span><br></pre></td></tr></table></figure>
<h2 id="符号使用"><a href="#符号使用" class="headerlink" title="符号使用"></a>符号使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#125; </span><br><span class="line">1.代表一个整体：sed &apos;2&#123;s/dog/cat/;s/test/test2&#125;&apos; data1.txt 里面可以包括多个命令。但是命令不一定要用其括起来</span><br><span class="line">2.正则匹配里面的限定次数的标识符</span><br><span class="line">\ 反斜杠，转义用，正则里面也可以用</span><br></pre></td></tr></table></figure>
<h1 id="awk-格式化输出文本"><a href="#awk-格式化输出文本" class="headerlink" title="awk(格式化输出文本)"></a>awk(格式化输出文本)</h1><blockquote>
<p>总结：</p>
<p>1.匹配(可以使用正则)，使用$x 输出指定列</p>
<p>2.命令格式：awk <strong>-F ‘xx’</strong> ‘xx<strong>{comm;comm2}</strong>‘ filename  //{}命令用;隔开</p>
<p>3.常用：awk ‘{print $x}’</p>
</blockquote>
<h2 id="指定分隔符"><a href="#指定分隔符" class="headerlink" title="指定分隔符"></a>指定分隔符</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-F &apos;:&apos; &apos;&#123;print $1&#125;&apos; file //以:为分隔符</span><br></pre></td></tr></table></figure>
<h2 id="引用数据"><a href="#引用数据" class="headerlink" title="引用数据"></a>引用数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$0 //整个数据</span><br><span class="line">$1 //第一个数据字段，2、3、4类似</span><br><span class="line"></span><br><span class="line">echo &quot;my name is rich&quot; | gawk &apos;&#123;$4=&quot;zxy&quot;;print $0&#125;&apos;</span><br><span class="line">上面命令的解释</span><br><span class="line">1.$4可以被赋值</span><br><span class="line">2.&#123;&#125;内多个命令用;隔开</span><br></pre></td></tr></table></figure>
<h2 id="初始化与收尾"><a href="#初始化与收尾" class="headerlink" title="初始化与收尾"></a>初始化与收尾</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BEGIN&#123;&#125; //一般在这个里面设置一些属性例如忽略大小写</span><br><span class="line">END&#123;&#125;</span><br><span class="line"></span><br><span class="line">awk &apos;BEGIN&#123;printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;,&quot;FILENAME&quot;,&quot;ARGC&quot;,&quot;FNR&quot;,&quot;FS&quot;,&quot;NF&quot;,&quot;NR&quot;,&quot;OFS&quot;,&quot;ORS&quot;,&quot;RS&quot;;printf &quot;---------------------------------------------\n&quot;&#125; &#123;printf &quot;%4s %4s %4s %4s %4s %4s %4s %4s %4s\n&quot;,FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS&#125; END&#123;printf &quot;finish&quot;&#125;&apos;  log.txt</span><br></pre></td></tr></table></figure>
<h2 id="指定输出"><a href="#指定输出" class="headerlink" title="指定输出"></a>指定输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;&#123;print $1,$3&#125;&apos; //这个功能比较喜欢，如果使用正则感觉麻烦，可以任意指定输出一些项目</span><br><span class="line"></span><br><span class="line">iw dev wlan0 station dump | grep Station |awk &apos;&#123;print $2&#125;&apos;</span><br><span class="line">上面的例子最终输出mac地址，使用正则表达式可以达成目的但是复杂点</span><br></pre></td></tr></table></figure>
<h2 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h2><p><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200923154422.png" alt=""></p>
<h2 id="内建函数"><a href="#内建函数" class="headerlink" title="内建函数"></a>内建函数</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有数学函数、字符串函数、时间函数，用得多的是字符串,列出我现在想到有用的</span><br><span class="line">tolower(s) 转换小写</span><br><span class="line">toupper(s) 转换大写</span><br><span class="line">length(s) //如果没有指定返回$0</span><br></pre></td></tr></table></figure>
<h2 id="使用正则-1"><a href="#使用正则-1" class="headerlink" title="使用正则"></a>使用正则</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">awk &apos;$2 ~ /th/ &#123;print $2,$4&#125;&apos; log.txt //某一行的第二个字符中有th</span><br><span class="line">~ 表示模式开始。// 中是模式。 ~不是必须</span><br><span class="line"></span><br><span class="line">awk &apos;/re/ &apos; log.txt</span><br></pre></td></tr></table></figure>
<h1 id="常用技巧"><a href="#常用技巧" class="headerlink" title="常用技巧"></a>常用技巧</h1><h2 id="echo颜色输出"><a href="#echo颜色输出" class="headerlink" title="echo颜色输出"></a>echo颜色输出</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cecho() &#123;</span><br><span class="line">  local code=&quot;\033[&quot;</span><br><span class="line">  case &quot;$1&quot; in</span><br><span class="line">    black  | bk) color=&quot;$&#123;code&#125;0;30m&quot;;;</span><br><span class="line">    red    |  r) color=&quot;$&#123;code&#125;1;31m&quot;;;</span><br><span class="line">    green  |  g) color=&quot;$&#123;code&#125;1;32m&quot;;;</span><br><span class="line">    yellow |  y) color=&quot;$&#123;code&#125;1;33m&quot;;;</span><br><span class="line">    blue   |  b) color=&quot;$&#123;code&#125;1;34m&quot;;;</span><br><span class="line">    purple |  p) color=&quot;$&#123;code&#125;1;35m&quot;;;</span><br><span class="line">    cyan   |  c) color=&quot;$&#123;code&#125;1;36m&quot;;;</span><br><span class="line">    gray   | gr) color=&quot;$&#123;code&#125;0;37m&quot;;;</span><br><span class="line">    *) local text=&quot;$1&quot;</span><br><span class="line">  esac</span><br><span class="line">  [ -z &quot;$text&quot; ] &amp;&amp; local text=&quot;$color$2$&#123;code&#125;0m&quot;</span><br><span class="line">  echo -e &quot;$text&quot;</span><br><span class="line">&#125;</span><br><span class="line">esac</span><br><span class="line">使用方法:</span><br><span class="line">cecho g &quot;===========&quot;//绿色输出</span><br></pre></td></tr></table></figure>
<h2 id="命令前的反斜杠"><a href="#命令前的反斜杠" class="headerlink" title="命令前的反斜杠"></a>命令前的反斜杠</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\ls 意思是使用最原始的ls，没有颜色等等</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>stm32中断</title>
    <url>/2018/10/18/stm32%E4%B8%AD%E6%96%AD/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>学习概念<blockquote>
<p>是什么？不是什么？和其他有什么异同？</p>
</blockquote>
</li>
<li>使用<blockquote>
<p>怎样使用正确？需要注意什么？容易出错的地方？</p>
</blockquote>
</li>
</ul>
</blockquote>
<h3 id="中断的概念"><a href="#中断的概念" class="headerlink" title="中断的概念"></a>中断的概念</h3><ul>
<li>是什么：<br>解决轮询的资源浪费，功能有类似之处。</li>
<li>不是什么：<br>中断函数无返回值，无参数，不是普通函数。</li>
<li>和类似的功能异同点：<br>暂时不知如何比较<a id="more"></a>
<h3 id="中断的使用"><a href="#中断的使用" class="headerlink" title="中断的使用"></a>中断的使用</h3></li>
<li><p>怎样正确</p>
<ul>
<li><p>中断函数保存到startup_stm32f40xx.s<br><code>例如：IMPORT gec_key0_handlerfun</code><br>或者更改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXPORT  EXTI0_IRQHandler   //任意更改！                                                     </span><br><span class="line">   EXPORT  EXTI1_IRQHandler                                                         </span><br><span class="line">   EXPORT  EXTI2_IRQHandler                                                           </span><br><span class="line">   EXPORT  EXTI3_IRQHandler                                                           </span><br><span class="line">   EXPORT  EXTI4_IRQHandler</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置GPIO(略)</p>
</li>
<li>SYSCFG配置</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG,ENABLE);//使能syscfg时钟</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_EXTIT,ENABLE);//使能外部中断时钟</span><br><span class="line">SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA,EXTI_PinSource0);//外部中断输入引脚的选择</span><br></pre></td></tr></table></figure>
<ul>
<li><p>EXTI外部中断的配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">EXTI_InitTypeDef q;</span><br><span class="line">q.EXTI_Line = EXTI_Line0| EXTI_Line2| EXTI_Line3| EXTI_Line4;</span><br><span class="line">q.EXTI_Mode = EXTI_Mode_Interrupt;</span><br><span class="line">q.EXTI_Trigger = EXTI_Trigger_Falling;</span><br><span class="line">q.EXTI_LineCmd = ENABLE;</span><br><span class="line"></span><br><span class="line">EXTI_Init(&amp;q);</span><br></pre></td></tr></table></figure>
</li>
<li><p>NVIC 配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);</span><br><span class="line"></span><br><span class="line">NVIC_InitTypeDef r;</span><br><span class="line">r.NVIC_IRQChannel = EXTI0_IRQn;</span><br><span class="line">r.NVIC_IRQChannelPreemptionPriority = 2;</span><br><span class="line">r.NVIC_IRQChannelSubPriority = 2;</span><br><span class="line">r.NVIC_IRQChannelCmd = ENABLE; </span><br><span class="line">NVIC_Init(&amp;r);</span><br></pre></td></tr></table></figure>
</li>
<li><p>中断标志的获取与清零<br><code>EXTI_GetITStatus(EXTI_Line0) == SET</code><br><code>EXTI_ClearFlag (EXTI_Line0);</code></p>
</li>
</ul>
</li>
</ul>
<ul>
<li>需要注意什么<br>startup_stm32f40xx.s 配置中断函数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.STM32F4xx 中断总概述</span><br><span class="line">	任何中断产生到cpu的响应,都需经过两大阶段</span><br><span class="line">		可屏蔽中断:中断产生后CPU不会收到中断信号 或 cpu收到中断信号但不受理该中断</span><br><span class="line">	1) 中断源控制</span><br><span class="line">		中断源 也就是产生中断事件的设备,设备能不能产生终端,必须要有一根中断请求线(IRQ Requst Line)</span><br><span class="line">		链接到 中断控制器(NVIC)的中断输入引脚上</span><br><span class="line">		如果: 外设利用 中断请求线链接到了 中断控制器,则表示 外设可以产生中断事件</span><br><span class="line">			   否则,外设无法产生中断</span><br><span class="line">	</span><br><span class="line">	2) 中断控制器控制  NVIC</span><br><span class="line">		对所有的中断输入引脚进行管理和控制,给CPU一个中断信号,通知CPU某某设备产生了中断</span><br><span class="line">		</span><br><span class="line">		CPU再按约定,切换模式到HandlerMOde,再到特定的地址上的中断向量表中去取&quot;中断处理函数&quot;执行</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		一个设备产生的终端,首先要经过&quot;中断源&quot;这一级,&quot;中断源&quot;可以</span><br><span class="line">		屏蔽或使能(Enable/disable)自己的中断,即使外部电路产生了一个&quot;事件&quot;</span><br><span class="line">		&quot;中断源&quot;也可以不向上级(NVIC)报告</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		中断控制器(NVIC): 他可以控制中断,他在收到外设的中断信号后,可以选择enable/disable这个中断</span><br><span class="line">			意思是说,NVIC可以选择 是否向上级(CPU)报告这个中断事件</span><br><span class="line">	</span><br><span class="line">									</span><br><span class="line">4.STM32外部中断</span><br><span class="line">	人为的把中断分为 : 外设中断   和 外部中断</span><br><span class="line">		外设中断: 指UART/TIMER/IIC/SPI....等设备产生的中断,</span><br><span class="line">			这些设备不需要人去设置</span><br><span class="line">			</span><br><span class="line">		外部中断:</span><br><span class="line">			指由GPIO链接的外部电路所产生的终端事件</span><br><span class="line">			需要依赖于外部电路,而且,GPIO还可以 软件配置类型(上升沿/下降沿)产生中断 </span><br><span class="line">							上升 :  0  --- &gt; 1   上坡</span><br><span class="line">							下降:   1  --- &gt; 0   下坡 </span><br><span class="line">		</span><br><span class="line">			</span><br><span class="line">	请参考&lt;STM32F4xx外部中断处理逻辑&gt;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	GPIO中断的过程:</span><br><span class="line">		GPIO控制器 ---&gt; SYSCFG选择器 ---&gt; EXTI(External Interrupt)外部中断控制器</span><br><span class="line">		 ----&gt; NVIC中断控制器 ----&gt; CPU</span><br><span class="line">									中断向量表 --&gt; 寻址	</span><br><span class="line">									</span><br><span class="line">5.外部中断的代码实现</span><br><span class="line">	外部中断函数名</span><br><span class="line">		KEY0  ---&gt; PA0  ---&gt; EXTI0(使能GPIO组中断,0表示 PA0,PB0,PC0,..,PI0) ---&gt; NVIC </span><br><span class="line">					-----&gt; CPU中断向量表 ----&gt; EXTI0_IRQHandler</span><br><span class="line">		KEY1  ---&gt; PE2 ----&gt; EXTI2 ....</span><br><span class="line">		KEY2  ---&gt; PE3  ---&gt; EXTI3</span><br><span class="line">		KEY3  ---&gt; PE4  ---&gt; EXTI4</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	1) 配置GPIO</span><br><span class="line">		使能GPIO分组时钟</span><br><span class="line">			RCC_AHB1.....</span><br><span class="line">		GPIO_Init() ----&gt; 输入模式</span><br><span class="line">		</span><br><span class="line">	2) SYSCFG配置</span><br><span class="line">		使能SYSCFG的时钟</span><br><span class="line">			RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState);</span><br><span class="line">		外部中断输入引脚的选择</span><br><span class="line">			void SYSCFG_EXTILineConfig  ( uint8_t  EXTI_PortSourceGPIOx, // 选择GPIO口分组</span><br><span class="line">													//x = A,B,C,D,..,I</span><br><span class="line">													// EXTI_PortSourceGPIOA</span><br><span class="line">									  uint8_t  EXTI_PinSource0  //选择GPIOx组的引脚的编号</span><br><span class="line">													//x = 0,1,2,3,...,15</span><br><span class="line">													//EXTI_PinSource0</span><br><span class="line">									 );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	3) EXTI外部中断的配置</span><br><span class="line">			EXTI_Init用来配置一个外部中断</span><br><span class="line">		void EXTI_Init  ( EXTI_InitTypeDef *  EXTI_InitStruct ) </span><br><span class="line">			参数结构体如下:</span><br><span class="line">			typedef struct</span><br><span class="line">			&#123;</span><br><span class="line">			  uint32_t EXTI_Line;   //指定要初始化 的外部中断的编号</span><br><span class="line">						// EXTI_Line0  EXTI_Line1 .....</span><br><span class="line">						//如果有多个需要指定,则可以用 &apos;|&apos;</span><br><span class="line">			  EXTIMode_TypeDef EXTI_Mode;   //指定外部中断的模式</span><br><span class="line">						//  EXTI_Mode_Interrupt   中断模式</span><br><span class="line">						//  EXTI_Mode_Event       事件模式</span><br><span class="line">			  EXTITrigger_TypeDef EXTI_Trigger; // 指定外部中断线的触发方式,选择上升/下降沿触发</span><br><span class="line">						//EXTI_Trigger_Rising = 0x08,  上升沿</span><br><span class="line">						//EXTI_Trigger_Falling = 0x0C,  下降沿</span><br><span class="line">						//EXTI_Trigger_Rising_Falling = 0x10  双边沿触发</span><br><span class="line">						// 上述三个任选一个</span><br><span class="line">			  FunctionalState EXTI_LineCmd;  // 使能或禁止外部中断</span><br><span class="line">						//ENABLE   使能</span><br><span class="line">						//DISABLE  禁止</span><br><span class="line">			  &#125;EXTI_InitTypeDef;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">		----------------------------</span><br><span class="line">			EXTI_ClearFlag 用来清除掉EXTI_Line 指定的中断 pending为,这个函数一般是在中断处理完后调用</span><br><span class="line">		void EXTI_ClearFlag  ( uint32_t  EXTI_Line )  </span><br><span class="line"></span><br><span class="line">		</span><br><span class="line">			用来判断中断是否产生</span><br><span class="line">		FlagStatus EXTI_GetFlagStatus  ( uint32_t  EXTI_Line ) </span><br><span class="line">		ITStatus EXTI_GetITStatus  ( uint32_t  EXTI_Line ) </span><br><span class="line">				EXTI_Line 表示要获取状态的 中断线(哪个外部引脚)</span><br><span class="line">			返回值:</span><br><span class="line">				SET  表示中断触发</span><br><span class="line">				RESET 表示中断未触发</span><br><span class="line">		</span><br><span class="line">			比如:</span><br><span class="line">				if(EXTI_GetITStatus(EXTI_Line0) == SET)</span><br><span class="line">				&#123;</span><br><span class="line">					//表示  EXTI_Line0 产生了中断</span><br><span class="line">				&#125;</span><br><span class="line">				</span><br><span class="line">				if(EXTI_GetITStatus(EXTI_Line1) == SET)</span><br><span class="line">				&#123;</span><br><span class="line">					//表示  EXTI_Line1 产生了中断</span><br><span class="line">				&#125;</span><br><span class="line">				....</span><br><span class="line">				if(EXTI_GetITStatus(EXTI_Line15) == SET)</span><br><span class="line">				&#123;</span><br><span class="line">					//表示  EXTI_Line15 产生了中断</span><br><span class="line">				&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	4)NVIC 配置</span><br><span class="line">			NVIC_Init</span><br><span class="line">		void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)	</span><br><span class="line">			typedef struct</span><br><span class="line">			&#123;</span><br><span class="line">			  uint8_t NVIC_IRQChannel;    //指定要初始化的中断通道(中断编号)</span><br><span class="line">						//外部中断0编号   EXTI0_IRQn</span><br><span class="line">						//串口0编号   UART0_IRQn</span><br><span class="line">						// 外设编号   外设名_IRQn</span><br><span class="line">			  uint8_t NVIC_IRQChannelPreemptionPriority;  //抢占优先级</span><br><span class="line">			  uint8_t NVIC_IRQChannelSubPriority;         //子优先级</span><br><span class="line">					NVIC允许用户给每一个中断通道的优先级作配置,每个中断的优先级有4bits(0~15)</span><br><span class="line">					数值越小,则优先级越高,中断的优先级分为两种</span><br><span class="line">						抢占优先级</span><br><span class="line">							决定是否可以抢占正在执行处理的中断</span><br><span class="line">							当一个中断A正在执行时(中断处理函数已经在执行),此时又产生了一个B中断</span><br><span class="line">								如果 B中断的抢占优先级 高于 A中断的抢占优先级,则暂停A中断的处理函数</span><br><span class="line">								转区执行 B中断的处理函数,返回后再继续执行A中断的处理函数</span><br><span class="line">								</span><br><span class="line">						子优先级</span><br><span class="line">							决定如果两个或两个以上的同抢占优先级的中断同时来,CPU优先处理谁的问题.</span><br><span class="line">								比如:两个 优先级为4的中断 A,B产生,而A的子优先级为 2 ,B的子优先级为3</span><br><span class="line">										则先执行 A中断(优先级数字越小,等级越高)</span><br><span class="line">									在抢占优先级相同时,子优先级越高,则&quot;优势&quot;越大</span><br><span class="line">									</span><br><span class="line">						4bits = x bits(抢占优先级) + (4-x)bits(子优先级)</span><br><span class="line">						</span><br><span class="line">						NVIC_PriorityGroupConfig函数用来配置各占的Bit位数量</span><br><span class="line">								</span><br><span class="line">				</span><br><span class="line">			  FunctionalState NVIC_IRQChannelCmd;  //使能/禁止中断</span><br><span class="line">						// ENABLE   使能</span><br><span class="line">						// DISABLE  禁止</span><br><span class="line">						</span><br><span class="line">			&#125; NVIC_InitTypeDef;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">			NVIC_PriorityGroupConfig函数用来配置各占的Bit位数量</span><br><span class="line">		void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup);</span><br><span class="line">					NVIC_PriorityGroup_0   x(抢占优先级)占0bits</span><br><span class="line">					NVIC_PriorityGroup_1   x(抢占优先级)占1bits</span><br><span class="line">					NVIC_PriorityGroup_2   x(抢占优先级)占2bits</span><br><span class="line">					NVIC_PriorityGroup_3   x(抢占优先级)占3bits</span><br><span class="line">					NVIC_PriorityGroup_4   x(抢占优先级)占4bits</span><br></pre></td></tr></table></figure>
<ul>
<li>容易出错的地方</li>
</ul>
<p>中断向量表</p>
]]></content>
      <categories>
        <category>Stm32</category>
      </categories>
  </entry>
  <entry>
    <title>方法论</title>
    <url>/2018/10/18/%E6%96%B9%E6%B3%95%E8%AE%BA/</url>
    <content><![CDATA[<p>还记得刚进高中时，语文老师提出一个如何分析古诗的问题。我当时随便想了一下：</p>
<blockquote>
<p>这首诗表达了什么感情<br>作者是如何表达这种感情的<br>作者为何要表达这种感情</p>
</blockquote>
<a id="more"></a>
<p>我说出这几句话后，老师上第一节课时便当着全班的面问了我的名字。说明我那时已经掌握了分析诗歌的正确方法论，而这个方法是我想出来的，说明经过多年的古诗背诵，我悟得了诗歌得套路。</p>
<p>学习编程这么久，博客也写了但是效果却不好，现在分析原因，就是因为没有掌握正确的方法论。看到李笑来对概念的解释我决定试一试这个我觉得正确的方法论。</p>
<ul>
<li>学习概念<blockquote>
<p>是什么？不是什么？和其他有什么异同？</p>
</blockquote>
</li>
<li>使用<blockquote>
<p>怎样使用正确？需要注意什么？容易出错的地方？</p>
</blockquote>
</li>
</ul>
<p>现在我就写个例子，以后也要这样写。</p>
<h3 id="cpu的大小端概念："><a href="#cpu的大小端概念：" class="headerlink" title="cpu的大小端概念："></a>cpu的大小端概念：</h3><ul>
<li><p>是什么：</p>
<ul>
<li>大端模式：数据低字节高地址，数据高字节低地址</li>
<li>小端模式：低字节低地址，高字节高地址</li>
</ul>
</li>
<li><p>不是什么：<br>是数据的字节 而不是位。</p>
</li>
<li>异同：<br>暂时无对比对象</li>
</ul>
<h3 id="cpu的大小端验证："><a href="#cpu的大小端验证：" class="headerlink" title="cpu的大小端验证："></a>cpu的大小端验证：</h3><ul>
<li><p>正确的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">方法一：共用体 共用空间 截取 </span><br><span class="line">int IsLitte＿Endian()</span><br><span class="line">&#123;</span><br><span class="line">	union w</span><br><span class="line">	&#123;</span><br><span class="line">		</span><br><span class="line">		int a;</span><br><span class="line">		</span><br><span class="line">		char b;</span><br><span class="line">	&#125;c;</span><br><span class="line">	</span><br><span class="line">	c.a=1;</span><br><span class="line">	</span><br><span class="line">	return (c.b==1);//若处理器是Big_endian的，则返回false；若是Little_endian的，则返回true。</span><br><span class="line">&#125;</span><br><span class="line">方法二：强制类型转换</span><br><span class="line">bool或者int？ IsLitte_Endian()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int a = 0x12345678;//int占用4字节，16进制的话一位相当4位2进制，4*8=32bit=4byte</span><br><span class="line"></span><br><span class="line">short *p=(short*)&amp;a;//short占用2字节</span><br><span class="line"></span><br><span class="line">return (0x5678 == *p);//若处理器是Big_endian的，则返回false；若是Little_endian的，则返回true。</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>需要注意：<br>单纯的赋值不能判断大小端口，要涉及地址。</p>
</li>
<li>容易出错的地方：<br>直接用 int 赋值给char</li>
</ul>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>代码随想</tag>
      </tags>
  </entry>
  <entry>
    <title>二胡与编程</title>
    <url>/2018/10/16/%E4%BA%8C%E8%83%A1%E4%B8%8E%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>你就已经初步理解了编译器是什么，你只需要在将来加深这种理解。 –yinwang</p>
</blockquote>
<p>小时候去学二胡，从来没有认真练过曲子，也没有感到高兴的时刻，但是花了很多钱，那时候用的是父母的，不怎么心疼。学了5年，应该是初步理解二胡的一些技巧，而在大一的时候我花了很多时间去加深了一些理解。后面真的能全身心的投入去演奏，感受曲子中的各种感情。<br><a id="more"></a><br>自2018-7月到今天，学习c语言3个多月，应该是初步理解了一些c语言的知识，我也希望在工作中能加深对它的理解。</p>
<p>有段时间练习二胡的感觉很好，练习各种曲子，基本是几遍就可以离谱表演。现在认真想想，应该是练琴的时候刺激到了大脑的某个部位，提升了其能力。现在我分析一下：</p>
<ul>
<li>练琴时心无旁骛，沉浸在自己的世界，就是可怜了我那不打游戏的室友；</li>
<li>练习的都是自己很喜欢的曲子，听过许多遍，旋律已十分熟悉；</li>
<li>练琴时，先把曲子的整体架构梳理清楚了，难点和需要注意的地方都会多多练习，有段时间很花心，听一首喜欢一首，谱子都没有，或者就随便翻一个谱子，边听边练，练了几下练不好就不练了，这个就是总听它们说的无脑练习吧，不动脑子去练习，如果毅力够，也许能花很多时间完成任务。不过这个毅力不能叫毅力，这是一种精神的沦陷，陷入其中无法自拔。做事得动脑子啊（说到动脑子，我买东西的时候会货比三家，选择适合自己的，价格又不贵的，总会花很多时间在选购上面，买来的东西自然不会太差，但是我也太容易沦陷了）！</li>
<li><blockquote>
<p>永远不可能“准备好”，准备得差不多就得上了</p>
</blockquote>
</li>
</ul>
<p>（买东西也是，以后买东西，问问人，多看看，不能超过1个小时，那些细微的差别没必要花上几个小时，不如去看看书，但是不能无脑！）。<br>也许水平有限，但是不妨碍在有限的能力内做到力所能及的完美，练琴时发现有些地方实在是做不到，我一般会选择放慢节奏，如何死磕，先磕一会儿，实在不行，改改曲子呗。</p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>代码随想</tag>
      </tags>
  </entry>
  <entry>
    <title>vim技巧</title>
    <url>/2018/09/10/vim%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>留下坑，慢慢填</p>
<blockquote>
<p>文本编辑需求：</p>
<p>1.跳转：代码跳转、单词跳转、任意跳转</p>
<p>2.补全：字典补全、拼写检查</p>
<p>3.搜索替换：正则搜索、指定范围替换</p>
<p>4.多文件编辑：文件对比、多窗口</p>
<p>5.块编辑</p>
</blockquote>
<p><img src="http://www.forgotfun.org/zb_users/upload/2018/05/201805281527472732888965.png" alt=""><br><em>1. 标签页和多窗口</em><br><em>2. </em></p>
<ul>
<li>列操作<ul>
<li>ctrl+v：按下后左下脚会提示【可视块】</li>
<li>上下左右开始选择要操作的块</li>
<li>shift+i：编辑，可以tab、输入等此时只有一行生效</li>
<li>ese：编辑完成后，按下ese，之前选中的所有行都生效</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux常用开发环境</tag>
      </tags>
  </entry>
  <entry>
    <title>嵌入式链接保存</title>
    <url>/2018/09/10/%E9%93%BE%E6%8E%A5%E4%BF%9D%E5%AD%98/</url>
    <content><![CDATA[<p>arduino<br><a href="http://www.geek-workshop.com/portal.php?mod=list&amp;catid=1" target="_blank" rel="noopener">极客工坊</a><br><a href="http://www.dfrobot.com.cn/community/portal.php?mod=topic&amp;topicid=1" target="_blank" rel="noopener">项目</a><br><a href="http://arduino.nxez.com/" target="_blank" rel="noopener">实验室</a><br><a id="more"></a><br>数据结构和算法<br><a href="http://www.cnblogs.com/jingmoxukong/p/4302891.html" target="_blank" rel="noopener">排序算法参考</a></p>
<p><a href="http://jythoner.iteye.com/blog/570792" target="_blank" rel="noopener">书籍保存</a></p>
<p><a href="https://www.cnblogs.com/sky-heaven/category/636754.html" target="_blank" rel="noopener">linux</a></p>
<p><a href="https://blog.csdn.net/qq_34039315/article/details/78679029" target="_blank" rel="noopener">递归一下</a></p>
<p>嵌入式学习网站<br><a href="http://www.watchmen.cn/portal.php" target="_blank" rel="noopener">守望者:什么都有点</a></p>
<p><a href="https://blog.csdn.net/zqixiao_09/article/list/2" target="_blank" rel="noopener">linux别人的blog</a></p>
<p><a href="http://www.cnblogs.com/superit/p/?page=5" target="_blank" rel="noopener">嵌入式别人的blog</a></p>
<p><a href="http://www.huangea.com/?cat=14" target="_blank" rel="noopener">LINUX什么都有点</a></p>
<p><a href="https://blog.csdn.net/mybelief321/article/category/1431937" target="_blank" rel="noopener">嵌入式别人的blog2</a></p>
<p><a href="http://www.51cto.com/" target="_blank" rel="noopener">51cto</a></p>
<p><a href="http://www.mr-wu.cn" target="_blank" rel="noopener">吴川斌</a></p>
<p><a href="https://coolshell.cn/category/operatingsystem" target="_blank" rel="noopener">左耳朵耗子</a></p>
<p><a href="https://blog.csdn.net/qq_17308321/article/details/53664235" target="_blank" rel="noopener">他人资料整理1</a></p>
<p><a href="https://blog.csdn.net/ce123_zhouwei/article/details/6775877" target="_blank" rel="noopener">他人资料整理2</a></p>
<p><a href="https://www.cnblogs.com/ECJTUACM-873284962/p/7237861.html" target="_blank" rel="noopener">二次元程序员</a></p>
<p>github教程<br><a href="https://git-scm.com/book/zh/v2/" target="_blank" rel="noopener">https://git-scm.com/book/zh/v2/</a></p>
<p><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>
<p><a href="http://mdsa.51cto.com/art/201511/496267.htm" target="_blank" rel="noopener">成为理想程序员</a></p>
<p><a href="https://github.com/jobbole/awesome-c-cn#vim" target="_blank" rel="noopener">C语言资料大全</a></p>
<p>grub使用教程<br><a href="http://wiki.ubuntu.org.cn/GRUB%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">http://wiki.ubuntu.org.cn/GRUB%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B</a></p>
<p>ALL in one:make a kinds of sys boot from U盘<br><a href="https://www.aioboot.com/en/how-to-use/" target="_blank" rel="noopener">https://www.aioboot.com/en/how-to-use/</a>   </p>
<p><a href="https://www.cnblogs.com/prettyshuang/p/5553140.html" target="_blank" rel="noopener">字节对齐</a></p>
<p><a href="http://www.cnblogs.com/rocedu/p/4902411.html" target="_blank" rel="noopener">别出心裁Linux命令</a></p>
<p><a href="https://linux.cn/article-3760-1.html" target="_blank" rel="noopener">cheat</a></p>
<p><a href="http://bbs.3dmgame.com/thread-4268032-1-1.html" target="_blank" rel="noopener">极品飞车</a></p>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言资料</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法</title>
    <url>/2018/09/07/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>[TOC]</p>
<p>参考：写给大家看的算法、218例<br><img src="https://gitee.com/Rainbowstar_Ah/Picgo/raw/master/img/20200923165009.png" alt=""></p>
<h1 id="排序算法的判断指标："><a href="#排序算法的判断指标：" class="headerlink" title="排序算法的判断指标："></a>排序算法的判断指标：</h1><a id="more"></a>
<h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>稳  定：冒泡、插入、归并、基<br>不稳定：选择、希尔、快速、堆<br>保存相同的元素，经过排序后，相对位置不变。<br>记忆规律：把原本的数组拆解的排序就不稳定。</p>
<h2 id="空间复杂度："><a href="#空间复杂度：" class="headerlink" title="空间复杂度："></a>空间复杂度：</h2><p>除了快速排序O(log2n)~O(N)都是O(1) </p>
<h2 id="时间复杂度："><a href="#时间复杂度：" class="headerlink" title="时间复杂度："></a>时间复杂度：</h2><pre><code>- 平均：shell特别，最快的归并和快速以及堆是O(nlog2n) 其他O(n2)
- 最好：最快的不变，其他的O(n) 直接排序别管了！
- 最坏：快速排序变成大部分都是的O(n2) 最快最稳的还是归并啊！
</code></pre><h1 id="排序算法概括与核心代码"><a href="#排序算法概括与核心代码" class="headerlink" title="排序算法概括与核心代码"></a>排序算法概括与核心代码</h1><h2 id="冒泡排序："><a href="#冒泡排序：" class="headerlink" title="冒泡排序："></a>冒泡排序：</h2><p>每次遍历，找到最大的放到后面，如何减小历遍的次数，两个循环。</p>
<p>缺点：慢，每次只能移动两个相邻的数据；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">冒泡排序：</span><br><span class="line">for()//趟数</span><br><span class="line">	for() //比较</span><br><span class="line">		if()//前后交换位置</span><br><span class="line">		&#123;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插入排序："><a href="#插入排序：" class="headerlink" title="插入排序："></a>插入排序：</h2><p>将后面的数据插入前面已经排列好的有序的数据中</p>
<p>缺点：比较次数不一定，比较次数越少，插入点后的数据移动越多，特别是数据量庞大的时候</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">直接插入排序：把后面的未排序的数，插入到前面有序的数据中</span><br><span class="line">void insort(int s[],int a)</span><br><span class="line">&#123;</span><br><span class="line">	int i,j;</span><br><span class="line">	for(i=2;i&lt;=n;i++)//循环完成堆数组的遍历</span><br><span class="line">	&#123;</span><br><span class="line">		s[0]=s[i];//s[0]起temp作用</span><br><span class="line">		j=i-1;//要比较元素的最左边的数据</span><br><span class="line">		while(s[0]&lt;s[j])//从后面开始比较，如果大于比较的数，就将其向后移动</span><br><span class="line">		&#123;</span><br><span class="line">			s[j+1]=s[j];</span><br><span class="line">			j--;//从后向前比较</span><br><span class="line">		&#125;</span><br><span class="line">		s[j+1]=s[0]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序:"></a>归并排序:</h2><p>将几个已排序的数据列，合并。</p>
<p>若n较大，并且要求排序稳定，则可以选择归并排序</p>
<h2 id="选择排序："><a href="#选择排序：" class="headerlink" title="选择排序："></a>选择排序：</h2><p>多次遍历，一个for循环。区别冒泡</p>
<p>很垃圾</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">选择排序：比我大就直接换位置</span><br><span class="line"></span><br><span class="line">for() //遍历数组</span><br><span class="line">	for() //遍历比较</span><br><span class="line">		if()//交换位置</span><br><span class="line">		&#123;</span><br><span class="line">			t=</span><br><span class="line">			---</span><br><span class="line">			 =t</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<h2 id="快速排序："><a href="#快速排序：" class="headerlink" title="快速排序："></a>快速排序：</h2><p>基准值 对比 根据基准值按照大小 左右分组 重复。</p>
<p>此排序算法的效率在序列越乱的时候，效率越高。在数据有序时，会退化成冒泡排序；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">快速排序：基准值 根据基准值分成左右分别大于和小于基准值的两组重复操作，使用递归完成。</span><br><span class="line"></span><br><span class="line">代码分析：</span><br><span class="line">定义起点和终点，取起点为基准值，从终点开始扫描</span><br><span class="line">i&lt;j这个条件贯穿程序，因为只要i&gt;j说明数据被扫描完了。</span><br><span class="line">void qusort(int s[],int start,int end)</span><br><span class="line">&#123;</span><br><span class="line">	int i,j;</span><br><span class="line">	i = start;</span><br><span class="line">	j = end ;</span><br><span class="line">	s[0]=s[start];</span><br><span class="line">	while(i&lt;j)</span><br><span class="line">	&#123;</span><br><span class="line">		while(i&lt;j&amp;&amp;s[0]&lt;s[j])//从后面开始找到比基准小的值</span><br><span class="line">			j--；</span><br><span class="line">		if(i&lt;j)</span><br><span class="line">		&#123;</span><br><span class="line">			s[i]=s[j];//将小于基准值的数放到基准值的位置</span><br><span class="line">			i++;//+1开始</span><br><span class="line">		&#125;</span><br><span class="line">		while(i&lt;j&amp;&amp;s[i]&lt;=s[0])</span><br><span class="line">			i++;//从前面开始找到大于基准的数</span><br><span class="line">		if(i&lt;j)</span><br><span class="line">		&#123;</span><br><span class="line">			s[j]=s[i];//将大于基准值的数放到之前找到的小于基准值的数的地方  </span><br><span class="line">			j--;-1结束 节省时间！</span><br><span class="line">		&#125;</span><br><span class="line">		s[i]=s[0];//将基准值填入空出的s[i]</span><br><span class="line">		if(start&lt;i)</span><br><span class="line">			qusort(s,start,j-1);</span><br><span class="line">		if(i&lt;end)</span><br><span class="line">			qusort(s,j+1,end);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="希尔排序："><a href="#希尔排序：" class="headerlink" title="希尔排序："></a>希尔排序：</h2><p>拆分 插入排序 合并</p>
<p>比较在希尔排序中是最主要的操作，而不是交换。用已知最好的步长序列的希尔排序比直接插入排序要快，甚至在小数组中比快速排序和堆排序还快，但在涉及大量数据时希尔排序还是不如快排；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">希尔排序:把数据进行分组后再进行插入排序</span><br><span class="line"></span><br><span class="line">代码：在插入排序的基础上，增加一个分组的功能。</span><br><span class="line">插入排序是在一个数据列中移动，每个数据间隔为1</span><br><span class="line">希尔排序是在分组后的数据列中，每个数据间隔为d，将1改成d既可</span><br><span class="line">void insort(int s[],int a)</span><br><span class="line">&#123;</span><br><span class="line">	int i,j,d;</span><br><span class="line">	while(d&gt;=1)</span><br><span class="line">	&#123;</span><br><span class="line">		for(i=d+1;i&lt;=n;i++)//循环完成遍历</span><br><span class="line">		&#123;</span><br><span class="line">			s[0]=s[i];//s[0]起temp作用</span><br><span class="line">			j=i-d;//要比较元素的最左边的数据</span><br><span class="line">			while(s[0]&lt;s[j])//从后面开始比较，如果大于比较的数，就将其向后移动</span><br><span class="line">			&#123;</span><br><span class="line">				s[j+d]=s[j];</span><br><span class="line">				j=j-d;//从后向前比较</span><br><span class="line">			&#125;</span><br><span class="line">			s[j+1]=s[0];</span><br><span class="line">		&#125;</span><br><span class="line">	d=d/2;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C语言</category>
      </categories>
      <tags>
        <tag>C语言算法</tag>
      </tags>
  </entry>
  <entry>
    <title>简单Hexo教程</title>
    <url>/2018/07/30/%E7%AE%80%E5%8D%95Hexo%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><ul>
<li>准备：github环境、github.io已配置好</li>
<li>安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener">node.js</a></li>
<li>npm install -g hexo<ul>
<li>windows：cmd执行</li>
</ul>
</li>
<li>使用环境的几条命令<ol>
<li>部署：npm install hexo-deployer-git –save </li>
</ol>
</li>
</ul>
<a id="more"></a>
<h1 id="初次本地体验Hexo"><a href="#初次本地体验Hexo" class="headerlink" title="初次本地体验Hexo"></a>初次本地体验Hexo</h1><ol>
<li>创建一个hexo文件夹保存内容</li>
<li>hexo init（initial：初始化）</li>
<li>hexo g（generate：生成）</li>
<li>hexo s （hexo server：启动本地服务预览）</li>
<li>复制出现的 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 到浏览器可以看到效果</li>
</ol>
<p>注意：如果电脑没有显示可能是端口被占用，使用hexo s -p 5000换个端口，网址的4000换成5000即可。</p>
<h1 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h1><p>打开根目录下的_config.yml文件开始配置</p>
<ol>
<li>界面：最上面可以找到title（标题）然后下面的都是可以写的，根据个人喜好配置。注意language可以用zh-Hans就可以显示中文。</li>
<li>主题：找到theme后面改成next，等下会配置此主题</li>
<li>开启搜索选项： npm install hexo-generator-searchdb –save</li>
<li>部署：配置好后方便后续的推送，找到deploy 格式如下<ul>
<li>type: git</li>
<li>repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:youname/yourname.github.io.git</li>
<li>branch: master<br>npm uninstall hexo-toc –save</li>
</ul>
</li>
</ol>
<p>Hexo的简单配置完成</p>
<h1 id="下载及配置Next主题"><a href="#下载及配置Next主题" class="headerlink" title="下载及配置Next主题"></a>下载及配置Next主题</h1><ol>
<li>Next下载（在根目录下输入）:git clone <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a> themes/next</li>
<li>简单配置<ul>
<li>风格：找到Schemes Pisces不错，去掉前面的#使用</li>
<li>头像：在最后添加avatar: /images/yours.png</li>
<li>搜索选项：Local search enable改为true</li>
<li>update_at改为true，增加更新时间(根据修改时间决定)</li>
</ul>
</li>
</ol>
<ol start="3">
<li>新建和推送<ul>
<li>新建：hexo new （布局–开头需要那些东西可以直接生成，在scaffolds文件夹中，我写了一个c.md）名字（生成.md文件，生成时间和标签头）例子：hexo new c 数据结构）</li>
<li>推送：hexo g(生成动态文件)—&gt;hexo s -p 5000(预览）—&gt;hexo deploy(部署） </li>
</ul>
</li>
</ol>
<h1 id="插件-amp-扩展"><a href="#插件-amp-扩展" class="headerlink" title="插件&amp;扩展"></a>插件&amp;扩展</h1><ul>
<li>添加tags以及categories，使用方法</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">在source/tags/index.md中找到文件index.md，添加一行</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br><span class="line">在source/categories/index.md中找到文件index.md，添加一行</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文章模板中添加</span><br><span class="line">tags:hexo</span><br><span class="line">categories: 学习有感</span><br><span class="line">效果如下</span><br></pre></td></tr></table></figure>
<p><a href="https://www.jianshu.com/p/5e9bd5e39ae6" target="_blank" rel="noopener">参考教程</a></p>
<ul>
<li>上传整个hexo目录到git<ul>
<li>主要是主题next要注意，删除clone仓库的.git目录：rm -rf .git</li>
<li>回到自己的仓库<ul>
<li>git rm -r –cached ./</li>
<li>git add .</li>
<li>git commit -m “”</li>
<li>git push</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
</search>
